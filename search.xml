<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/01/01/0001_hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="【hello-world是入门必备，每次都没有删，这次也不例外】"><a href="#【hello-world是入门必备，每次都没有删，这次也不例外】" class="headerlink" title="【hello world是入门必备，每次都没有删，这次也不例外】"></a>【hello world是入门必备，每次都没有删，这次也不例外】</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br> <span id="more"></span></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="图片引用问题"><a href="#图片引用问题" class="headerlink" title="图片引用问题"></a>图片引用问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  https://zhuanlan.zhihu.com/p/696630232 </span><br><span class="line">    https://cloud.baidu.com/article/3306365</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Index日常工作</title>
    <url>/2019/01/15/0002_%20Index%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【持续补充】</p>
<img src="/2019/01/15/0002_%20Index%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C/1.jpg" class title="sun"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<span id="more"></span>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="http://streamoc.music.tc.qq.com/M800101A9o5D1EWzyd.mp3?vkey=496F425FDC1F092E0924D5ADD6BA7AA6837C8528BF0696B09AE2DC0FCB8B1CCDCFBFABB6C0EDC11B17B69138025492940BF54F6EA14B310A&guid=MS&fromtag=8&uin=0"></iframe>

<h2 id="WORK"><a href="#WORK" class="headerlink" title="WORK"></a>WORK</h2><h3 id="周报的制作"><a href="#周报的制作" class="headerlink" title="周报的制作"></a>周报的制作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">登录到网页http://www.idxcheck.shippingex.cn/f/index</span><br><span class="line">修改期数和日期  </span><br><span class="line">检查权重有无变化 </span><br><span class="line">报价详情（主要是异常数据的处理） </span><br><span class="line">异常报价的记录 </span><br><span class="line">网站监控情况（重点)把该周系统发生的问题和解决方案记录下来。 </span><br><span class="line">数据备份情况（一般一次只改变那十几个表，check一下这周数据表修改多少次）</span><br><span class="line">每周四周五开始指数报价，周末开始制作，周日下午完成。完成后发送到航交所的邮箱</span><br></pre></td></tr></table></figure>


<h3 id="系统框架"><a href="#系统框架" class="headerlink" title="系统框架"></a>系统框架</h3><p>首先是对那两个demo系统的基本理解，使用的框架是开源的AdminLTE。</p>
<p>主要思想是利用这个框架的容器放入各个做好的数据可视化页面</p>
<p>数据可视化主要用的是<a href="https://echarts.baidu.com/">echarts</a>，<a href="https://www.highcharts.com/">highcharts</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">echarts： https://echarts.baidu.com/</span><br><span class="line">highcharts：https://www.highcharts.com/</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>index</tag>
        <tag>周报</tag>
        <tag>日常运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts的demo实现</title>
    <url>/2019/01/15/0003_Echarts%E7%9A%84demo%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【一个简单的echarts-demo的实现】github pages 加载会有点慢,demo就不去cdn优化了</p>
<div id="echarts4254" style="width: 85%;height: 400px;margin: 0 auto"></div>
<script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts4254'));
        // 指定图表的配置项和数据
        var option = {
	 tooltip : {
        trigger: 'axis',
        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
        }
    },
    legend: {
        data:['利润', '支出', '收入']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    xAxis : [
        {
            type : 'value'
        }
    ],
    yAxis : [
        {
            type : 'category',
            axisTick : {show: false},
            data : ['周一','周二','周三','周四','周五','周六','周日']
        }
    ],
    series : [
        {
            name:'利润',
            type:'bar',
            label: {
                normal: {
                    show: true,
                    position: 'inside'
                }
            },
            data:[200, 170, 240, 244, 200, 220, 210]
        },
        {
            name:'收入',
            type:'bar',
            stack: '总量',
            label: {
                normal: {
                    show: true
                }
            },
            data:[320, 302, 341, 374, 390, 450, 420]
        },
        {
            name:'支出',
            type:'bar',
            stack: '总量',
            label: {
                normal: {
                    show: true,
                    position: 'left'
                }
            },
            data:[-120, -132, -101, -134, -190, -230, -210]
        }
    ]
}
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<p>此图表是echarts的demo【google chrome浏览器会把echarts的脚本识别为不安全脚本，点击url栏最后的拦截脚本的安全盾，然后加载不安全脚本就可以看到效果图】<br>下面是echarts中的力导图的html实现<br> <span id="more"></span></p>
<hr>
<h2 id="为ECharts准备一个具备大小（宽高）的Dom"><a href="#为ECharts准备一个具备大小（宽高）的Dom" class="headerlink" title="为ECharts准备一个具备大小（宽高）的Dom"></a>为ECharts准备一个具备大小（宽高）的Dom</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;main&quot;</span> style=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="引入jquery"><a href="#引入jquery" class="headerlink" title="引入jquery"></a>引入jquery</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="引入echarts-js"><a href="#引入echarts-js" class="headerlink" title="引入echarts.js"></a>引入echarts.js</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/echarts.js&quot;</span>&gt;&lt;/script&gt;&lt;!-- echarts 新版本不支持force图，只能导入这个本地的（旧版）包--&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="在script标签中编写具体代码"><a href="#在script标签中编写具体代码" class="headerlink" title="在script标签中编写具体代码"></a>在script标签中编写具体代码</h2><h3 id="对require-config进行编写"><a href="#对require-config进行编写" class="headerlink" title="对require.config进行编写"></a>对require.config进行编写</h3><p>引入js文件夹，并命名为 echarts</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">			paths: &#123;</span><br><span class="line">				echarts: <span class="string">&#x27;js&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="对require进行编写"><a href="#对require进行编写" class="headerlink" title="对require进行编写"></a>对require进行编写</h3><h4 id="导入其他有用的模块（都在js文件夹下"><a href="#导入其他有用的模块（都在js文件夹下" class="headerlink" title="导入其他有用的模块（都在js文件夹下)"></a>导入其他有用的模块（都在js文件夹下)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(</span><br><span class="line">			[</span><br><span class="line">				<span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/bar&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/line&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/map&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/force&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/chord&#x27;</span></span><br><span class="line">			],</span><br><span class="line">			......//这里省略的代码在下面步骤</span><br><span class="line">		)</span><br></pre></td></tr></table></figure>

<h4 id="编辑图表代码（附上全部代码，具体修改见fuction）"><a href="#编辑图表代码（附上全部代码，具体修改见fuction）" class="headerlink" title="编辑图表代码（附上全部代码，具体修改见fuction）"></a>编辑图表代码（附上全部代码，具体修改见fuction）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;ECharts&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;P&gt;SDGYASDGSAJD ASDAS &lt;/P&gt;</span><br><span class="line">    &lt;!-- 1 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;main&quot;</span> style=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 2 引入jquery（要在echarts.js前面 --&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 3 引入echarts.js--&gt;</span><br><span class="line">	&lt;script src=<span class="string">&quot;js/echarts.js&quot;</span>&gt;&lt;/script&gt;&lt;!-- echarts 新版本不支持force图，只能导入这个本地的（旧版）包--&gt;</span><br><span class="line">    &lt;!--&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://echarts.baidu.com/gallery/vendors/echarts/echarts.min.js&quot;</span>&gt;&lt;/script&gt;--&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- step4 编写js--&gt;</span><br><span class="line">	&lt;!--在这里引入主题文件--&gt;</span><br><span class="line">	&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">		&lt;!-- step4-1 引入js文件夹，并命名为 echarts--&gt;</span><br><span class="line">		require.config(&#123;</span><br><span class="line">			paths: &#123;</span><br><span class="line">				echarts: <span class="string">&#x27;js&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		&lt;!-- step4-2 将代码写在require里面--&gt;</span><br><span class="line">		require(</span><br><span class="line">			&lt;!-- step4-2-1 导入其他有用的模块（都在js文件夹下）--&gt;</span><br><span class="line">			[</span><br><span class="line">				<span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/bar&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/line&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/map&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/force&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;echarts/chart/chord&#x27;</span></span><br><span class="line">			],</span><br><span class="line">			&lt;!-- step4-2-2 编辑图表代码--&gt;</span><br><span class="line">			<span class="keyword">function</span> (ec) &#123;</span><br><span class="line">				&lt;!--step4-2-2-1 设置数据--&gt;</span><br><span class="line">				var option=&#123;</span><br><span class="line">								//------------------------------------------</span><br><span class="line">								//此处以下是在官网上调试好的数据代码</span><br><span class="line">								title : &#123;</span><br><span class="line">									text: <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">									subtext: <span class="string">&#x27;副标题&#x27;</span>,</span><br><span class="line">									x:<span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">									y:<span class="string">&#x27;bottom&#x27;</span></span><br><span class="line">								&#125;,</span><br><span class="line">								tooltip : &#123;</span><br><span class="line">									trigger: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">									formatter: <span class="string">&#x27;&#123;a&#125; : &#123;b&#125;&#x27;</span></span><br><span class="line">								&#125;,</span><br><span class="line">								toolbox: &#123;</span><br><span class="line">									show : <span class="literal">true</span>,</span><br><span class="line">									feature : &#123;</span><br><span class="line">										restore : &#123;show: <span class="literal">true</span>&#125;,</span><br><span class="line">										magicType: &#123;show: <span class="literal">true</span>, <span class="built_in">type</span>: [<span class="string">&#x27;force&#x27;</span>, <span class="string">&#x27;chord&#x27;</span>]&#125;,</span><br><span class="line">										saveAsImage : &#123;show: <span class="literal">true</span>&#125;</span><br><span class="line">									&#125;</span><br><span class="line">								&#125;,</span><br><span class="line">								legend: &#123;</span><br><span class="line">									x: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">									data:[<span class="string">&#x27;家人&#x27;</span>,<span class="string">&#x27;朋友&#x27;</span>]</span><br><span class="line">								&#125;,</span><br><span class="line">								series : [</span><br><span class="line">									&#123;</span><br><span class="line">										<span class="built_in">type</span>:<span class="string">&#x27;force&#x27;</span>,</span><br><span class="line">										name : <span class="string">&quot;人物关系&quot;</span>,</span><br><span class="line">										ribbonType: <span class="literal">false</span>,</span><br><span class="line">										categories : [</span><br><span class="line">											&#123;</span><br><span class="line">												name: <span class="string">&#x27;人物&#x27;</span></span><br><span class="line">											&#125;,</span><br><span class="line">											&#123;</span><br><span class="line">												name: <span class="string">&#x27;家人&#x27;</span></span><br><span class="line">											&#125;,</span><br><span class="line">											&#123;</span><br><span class="line">												name:<span class="string">&#x27;朋友&#x27;</span></span><br><span class="line">											&#125;</span><br><span class="line">										],</span><br><span class="line">										itemStyle: &#123;</span><br><span class="line">											normal: &#123;</span><br><span class="line">												label: &#123;</span><br><span class="line">													show: <span class="literal">true</span>,</span><br><span class="line">													textStyle: &#123;</span><br><span class="line">														color: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">													&#125;</span><br><span class="line">												&#125;,</span><br><span class="line">												nodeStyle : &#123;</span><br><span class="line">													brushType : <span class="string">&#x27;both&#x27;</span>,</span><br><span class="line">													borderColor : <span class="string">&#x27;rgba(255,215,0,0.4)&#x27;</span>,</span><br><span class="line">													borderWidth : 1</span><br><span class="line">												&#125;,</span><br><span class="line">												linkStyle: &#123;</span><br><span class="line">													<span class="built_in">type</span>: <span class="string">&#x27;curve&#x27;</span></span><br><span class="line">												&#125;</span><br><span class="line">											&#125;,</span><br><span class="line">											emphasis: &#123;</span><br><span class="line">												label: &#123;</span><br><span class="line">													show: <span class="literal">false</span></span><br><span class="line">													// textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE</span><br><span class="line">												&#125;,</span><br><span class="line">												nodeStyle : &#123;</span><br><span class="line">													//r: 30</span><br><span class="line">												&#125;,</span><br><span class="line">												linkStyle : &#123;&#125;</span><br><span class="line">											&#125;</span><br><span class="line">										&#125;,</span><br><span class="line">										useWorker: <span class="literal">false</span>,</span><br><span class="line">										minRadius : 15,</span><br><span class="line">										maxRadius : 25,</span><br><span class="line">										gravity: 1.1,</span><br><span class="line">										scaling: 1.1,</span><br><span class="line">										roam: <span class="string">&#x27;move&#x27;</span>,</span><br><span class="line">										nodes:[</span><br><span class="line">											&#123;category:0, name: <span class="string">&#x27;乔布斯&#x27;</span>, value : 10, label: <span class="string">&#x27;乔布斯\n（主要）&#x27;</span>&#125;,</span><br><span class="line">											&#123;category:1, name: <span class="string">&#x27;丽萨-乔布斯&#x27;</span>,value : 2&#125;,</span><br><span class="line">											&#123;category:1, name: <span class="string">&#x27;保罗-乔布斯&#x27;</span>,value : 3&#125;,</span><br><span class="line">											&#123;category:1, name: <span class="string">&#x27;克拉拉-乔布斯&#x27;</span>,value : 3&#125;,</span><br><span class="line">											&#123;category:1, name: <span class="string">&#x27;劳伦-鲍威尔&#x27;</span>,value : 7&#125;,</span><br><span class="line">											&#123;category:2, name: <span class="string">&#x27;史蒂夫-沃兹尼艾克&#x27;</span>,value : 5&#125;,</span><br><span class="line">											&#123;category:2, name: <span class="string">&#x27;奥巴马&#x27;</span>,value : 8&#125;,</span><br><span class="line">											&#123;category:2, name: <span class="string">&#x27;比尔-盖茨&#x27;</span>,value : 9&#125;,</span><br><span class="line">											&#123;category:2, name: <span class="string">&#x27;乔纳森-艾夫&#x27;</span>,value : 4&#125;,</span><br><span class="line">											&#123;category:2, name: <span class="string">&#x27;蒂姆-库克&#x27;</span>,value : 4&#125;,</span><br><span class="line">											&#123;category:2, name: <span class="string">&#x27;龙-韦恩&#x27;</span>,value : 1&#125;,</span><br><span class="line">										],</span><br><span class="line">										links : [</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;丽萨-乔布斯&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 1, name: <span class="string">&#x27;女儿&#x27;</span>&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;保罗-乔布斯&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 2, name: <span class="string">&#x27;父亲&#x27;</span>&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;克拉拉-乔布斯&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 1, name: <span class="string">&#x27;母亲&#x27;</span>&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;劳伦-鲍威尔&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 2&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;史蒂夫-沃兹尼艾克&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 3, name: <span class="string">&#x27;合伙人&#x27;</span>&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;奥巴马&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;比尔-盖茨&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 6, name: <span class="string">&#x27;竞争对手&#x27;</span>&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;乔纳森-艾夫&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 1, name: <span class="string">&#x27;爱将&#x27;</span>&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;蒂姆-库克&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;龙-韦恩&#x27;</span>, target : <span class="string">&#x27;乔布斯&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;克拉拉-乔布斯&#x27;</span>, target : <span class="string">&#x27;保罗-乔布斯&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;奥巴马&#x27;</span>, target : <span class="string">&#x27;保罗-乔布斯&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;奥巴马&#x27;</span>, target : <span class="string">&#x27;克拉拉-乔布斯&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;奥巴马&#x27;</span>, target : <span class="string">&#x27;劳伦-鲍威尔&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;奥巴马&#x27;</span>, target : <span class="string">&#x27;史蒂夫-沃兹尼艾克&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;比尔-盖茨&#x27;</span>, target : <span class="string">&#x27;奥巴马&#x27;</span>, weight : 6&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;比尔-盖茨&#x27;</span>, target : <span class="string">&#x27;克拉拉-乔布斯&#x27;</span>, weight : 1&#125;,</span><br><span class="line">											&#123;<span class="built_in">source</span> : <span class="string">&#x27;蒂姆-库克&#x27;</span>, target : <span class="string">&#x27;奥巴马&#x27;</span>, weight : 1&#125;</span><br><span class="line">										]</span><br><span class="line">									&#125;</span><br><span class="line">								]</span><br><span class="line">								//此处以上是官网上调试好的数据代码</span><br><span class="line">								//------------------------------------------</span><br><span class="line">							&#125;</span><br><span class="line">				</span><br><span class="line">				&lt;!--step4-2-2-2 初始化echarts，并且引入主题<span class="string">&#x27;chalk&#x27;</span>--&gt;</span><br><span class="line">				var myChart2 = ec.init(document.getElementById(<span class="string">&#x27;main&#x27;</span>),<span class="string">&#x27;chalk&#x27;</span>); //,<span class="string">&#x27;macarons&#x27;</span>主题</span><br><span class="line">				&lt;!--step4-2-2-3 为myChart设置数据--&gt;</span><br><span class="line">				myChart2.setOption(option);</span><br><span class="line">		</span><br><span class="line">			&#125;</span><br><span class="line">		);</span><br><span class="line">	</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>美剧资源转到百度云</title>
    <url>/2019/01/15/0004_%E7%BE%8E%E5%89%A7%E8%B5%84%E6%BA%90%E8%BD%AC%E5%88%B0%E7%99%BE%E5%BA%A6%E4%BA%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【解决我姐的真实需求】</p>
<img src="/2019/01/15/0004_%E7%BE%8E%E5%89%A7%E8%B5%84%E6%BA%90%E8%BD%AC%E5%88%B0%E7%99%BE%E5%BA%A6%E4%BA%91/gem.jpg" class title="我lay了"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<p>现在很多人在手机上看剧，但是美剧的资源又少，不想到搜狐等网站等待广告时间，本文做的就是一个把资源转到你的百度云盘中，然后直接使用云播放就可以观看，省略中间的下载时间。<br> <span id="more"></span></p>
<p>在<a href="http://www.yuanlai521.com/">http://www.yuanlai521.com </a> 找到想看的美剧,可以看到全部集数的迅雷下载链接</p>
<h3 id="运行美剧-py"><a href="#运行美剧-py" class="headerlink" title="运行美剧.py"></a>运行美剧.py</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from lxml import etree</span><br><span class="line">def get_html():</span><br><span class="line">	url_list=[</span><br><span class="line">        	<span class="string">&quot;http://www.yuanlai521.com/meijuxiazai/281/&quot;</span>,</span><br><span class="line">        	<span class="string">&quot;http://www.yuanlai521.com/meijuxiazai/283/&quot;</span>,</span><br><span class="line">        	<span class="string">&quot;http://www.yuanlai521.com/meijuxiazai/285/&quot;</span>,</span><br><span class="line">        	<span class="string">&quot;http://www.yuanlai521.com/meijuxiazai/288/&quot;</span>,</span><br><span class="line">        	<span class="string">&quot;http://www.yuanlai521.com/meijuxiazai/20899/&quot;</span></span><br><span class="line">    		]</span><br><span class="line">    headers=&#123;</span><br><span class="line">        	<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&#x27;</span></span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> uu <span class="keyword">in</span> url_list:</span><br><span class="line">        response=requests.get(url=uu, headers=headers)</span><br><span class="line">        html=response.content</span><br><span class="line">        <span class="comment">#print (html)</span></span><br><span class="line">        html1 = etree.HTML(html)</span><br><span class="line">        html_data = html1.xpath(<span class="string">&#x27;//*[@id=&quot;entry&quot;]/p[3]/a/@href&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> html_data:</span><br><span class="line">        <span class="built_in">print</span> (i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_html()</span><br></pre></td></tr></table></figure>


<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ed2k://|file|越狱.Prison.Break.S01E01.Chi_Eng.BDrip.AC3.1024X576.x264-YYeTs人人影视.mkv|519649293|C4CC96A796EC009C756E1553AEC1A088|h=UL744MYQIKKEI4267WY6PRMOWGM5RETM|/ </span><br><span class="line">ed2k://|file|越狱.Prison.Break.S01E02.Chi_Eng.BDrip.AC3.1024X576.x264-YYeTs人人影视.mkv|525195861|B14976E29C60B5CFE6D51E102243781C|h=ZMCQGK4NIGWQUIYADW5PSY3WEZNAJN7D|/ </span><br><span class="line">ed2k://|file|越狱.Prison.Break.S01E03.Chi_Eng.BDrip.AC3.1024X576.x264-YYeTs人人影视.mkv|523167987|1F941CCA8B2A5BF06427F762D555240B|h=O4RF6F5LU4TWJXO5T2TCZMKURUL3HWO2|/ </span><br><span class="line">......</span><br></pre></td></tr></table></figure>


<h3 id="百度网盘上的操作"><a href="#百度网盘上的操作" class="headerlink" title="百度网盘上的操作"></a>百度网盘上的操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy链接</span><br><span class="line">在百度云网盘新建一个文件夹保存，以免混乱</span><br><span class="line">点击离线下载——&gt;新建普通任务——&gt;copy链接，保存到刚建的文件夹</span><br><span class="line">下载，刷新（1秒就可以看到你的百度云中已经有你想看的美剧）</span><br><span class="line">之后你就可以百度网盘在线观看。</span><br></pre></td></tr></table></figure>


<p>温馨提醒：本文仅从适用于在人人视频上找不到的美剧或者在各大视频网站中需要付费观看的美剧</p>
]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>身份证信息识别</title>
    <url>/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/1.png" class title="思路"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<p>近几年来，模式识别理论以及图像处理技术的发展为利用光学图像实现的证件识别行业奠定了理论基础，而电子技术的发展带来低成本、小体积的摄像头在移动终端的普遍应用为快速、便捷、低成本的证件识别提供了技术平台。基于光学摄像头图像处理处理以及模式识别理论的光学字符识别（OCR）在社会生活的各个行业得到了广泛的应用。光学字符识别在文字的录入方面具有速度快、效率高、错误少、成本低等优势。在光学字符识别的基础上发展起来的证件识别作为一种新兴的技术也在社会生活的各个方面得到了应用。随着国家信息化建设的发展，身份证作为我国公民的重要身份凭证，其识别与管理也成为了国内大量学者关注的热点问题。随着网络技术和数据库技术的发展，身份证识别的结果可以大大方便公安机关的业务管理工作，如身份证真伪的识别、犯罪份子追踪等。基于图像处理技术和模式识别的身份证识别系统可以广泛应用于海关、酒店登记、机场、公民身份核查、流动人口管理、追缉罪犯等业务中，具有广阔的应用前景和现实意义。</p>
<span id="more"></span>



<h2 id="图像预处理"><a href="#图像预处理" class="headerlink" title="图像预处理"></a>图像预处理</h2><h3 id="灰度化"><a href="#灰度化" class="headerlink" title="灰度化"></a>灰度化</h3><p>身份证图像样本一般是通过扫描仪等设备获取到的彩色图像。由于彩色图像包含大量的颜色信息,在计算机处理时也会占用大量资源,降低了运行速度,而且实际采集的图像由于光照影响,使得整幅图偏暗或偏亮,没有灰度层次感。因此在对身份证图像进行识别时常将彩色图像转变为灰度图像,以加快处理速度,然后对其进行图像预处理。图片灰度化处理就是将指定图片每个像素点的RGB三个分量通过一定的方法计算出该像素点的灰度值，使图像只含亮度而不含色彩信息。通常灰度化采用的公式有两种：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Gray=(R+G+B)/3;</span><br><span class="line">Gray=0.299R+0.587G+0.114B;</span><br></pre></td></tr></table></figure>
<p>本项目使用的是第二种。</p>
<h3 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h3><p>经过非均匀校正和图像灰度化的身份证图像减小了非均匀光照和图像色彩对文字识别的影响。身份证上的信息主要为文字，文字的主要特征为结构特征。结构特征是独立与图像灰度的一种特征量，因此身份证图像还需要经过二值化处理。用二值的数字信号表示的字符图像灰度信号被称作字符图形数字信号二值化。灰度图像的二值化要求有效从图像中区分字符像素。传统印刷字体图像的二值化要求一方面要求尽量保持原始字符的结构特征，另一方面要求二值化后的字符之间不能有空白。传统印刷字符的背景比较单一且平滑，背景与字符之间可以利用简单的全局阈值的方法区分。而我国身份证由于背景存在纹理，并且存在持证人的照片，简单的全局阈值无法将包含身份信息的字符有效区分出来。因此需要考虑全局和局部阈值相结合的办法。</p>
<img src="/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/3.png" class title="二值化的身份证"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<hr>
<h2 id="获得身份上各个区域"><a href="#获得身份上各个区域" class="headerlink" title="获得身份上各个区域"></a>获得身份上各个区域</h2><h3 id="字符区域"><a href="#字符区域" class="headerlink" title="字符区域"></a>字符区域</h3><p>二值图像即只有黑白两种颜色组成的图像，一般的白色为内容，黑色为背景。腐蚀是删除对象边界某些像素，既是让白色的区域瘦一圈；而膨胀则是给图像中的对象边界添加像素，即让白色的区域胖上一圈。而这个“圈”的大小，则是由参数来指定的。在本项目中的腐蚀膨胀这一步主要是将得到的二值图中的黑色块进行放大。即连接图片中相邻黑色像素点的元素。通过腐蚀可以把身份证上的身份证号码连接在一起形成一个矩形区域。然后进行轮廓提取，把每个大的区域找出来，除去小的区域，这样就可以定位得到身份证上各个的区域各部分的子图像。</p>
<img src="/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/4.png" class title="腐蚀化的身份证"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<h3 id="图片区域"><a href="#图片区域" class="headerlink" title="图片区域"></a>图片区域</h3><p>上面获得子图像中并没有获得身份证上的大头照，本文使用基于AdaBoost算法实现的人脸识别来获得大头照。首先使用Harr-like特征表示人脸，使用“积分图”实现特征数值的快速计算；也就是在一个 20*20 的图片提取一些简单的特征（称为Harr特征）。</p>
<img src="/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/6.png" class title="Harr特征"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<p>Harr特征的计算方法是将白色区域内的像素和减去黑色区域，因此在人脸与非人脸图片的相同位置上，值的大小是不一样的，这些特征可以用来区分人脸和分人脸。通过对矩形区域黑色和白色像素的计算可以识别出，前两个图为人脸，而最后一个图为非人脸。使用数千张切割好的人脸图片，和上万张背景图片作为训练样本。训练图片一般归一到 20*20 的大小。在这样大小的图片中，可供使用的 haar 特征数在 1 万个左右，使用AdaBoost算法挑选出一些最能代表人脸的矩形特征(弱分类器)，按照加权投票的方式将弱分类器构造为一个强分类器。将训练得到的若干强分类器串联组成一个级联结构的层叠分类器，级联结构能有效地提高分类器的检测速度。</p>
<hr>
<h2 id="身份证号码区域的数字提取"><a href="#身份证号码区域的数字提取" class="headerlink" title="身份证号码区域的数字提取"></a>身份证号码区域的数字提取</h2><p>身份证号码是由1-10（存在部分人群的身份证号码最后一位是X），从网上下载的到一个公开的数据，每个数字都有50张这样的图片，这些数据将用来训练。计算数字字符的特征向量，也即梯度分布特征+灰度分布部分训练数据得到一个1<em>72的特征向量，由calcGradientFeat函数实现。最后把训练矩阵和标签矩阵，保存到xml文件。在上面的步骤中已经获得身份证号码区域，分辨率缩放至300</em>20大小之后获得身份证号码区域的矩阵对象，然后用光照直方图处理身份证区域的图像，最后获得纯粹的字符矩阵。利用opencv自带的CvANN_MLP &amp;ann进行神经网模型的构建和训练。把训练矩阵和标签矩阵输入到构建的神经网络模型中，把经过神经网络模型后得到的字符特征向量分类得到由整数vector容易存储的矩阵，最后通过迭代器的方式输出容器对象的值。</p>
<img src="/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/12.png" class title="分类后的身份证号码区域"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<hr>
<h2 id="身份证出生日期和性别区域的信息获取"><a href="#身份证出生日期和性别区域的信息获取" class="headerlink" title="身份证出生日期和性别区域的信息获取"></a>身份证出生日期和性别区域的信息获取</h2><p>从得到的身份证号码文本中进行编辑。根据下面的身份证号码特征进行划分和提取。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">15位身份证号码：第7、8位为出生年份(两位数)，第9、10位为出生月份，第11、12位代表出生日期，第15位代表性别，奇数为男，偶数为女。  </span><br><span class="line">18位身份证号码：第7、8、9、10位为出生年份(四位数)，第11、第12位为出生月份，第13、14位代表出生日期，第17位代表性别，奇数为男，偶数为女。</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="调用百度OCR识别文字区域"><a href="#调用百度OCR识别文字区域" class="headerlink" title="调用百度OCR识别文字区域"></a>调用百度OCR识别文字区域</h2><p>在百度AI上获得API Key和Secret Key，通过API Key和Secret Key获取的access_token。对每个区域的照片进行base64编码，并去掉图片头，再通过urlencode变成一个字符串，最后发送请求。（每天可以免费500次）</p>
<img src="/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/14.png" class title="转换编码处理后的请求数据"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<hr>
<h2 id="最终的是实验结果"><a href="#最终的是实验结果" class="headerlink" title="最终的是实验结果"></a>最终的是实验结果</h2><img src="/2019/01/17/0005_%E8%BA%AB%E4%BB%BD%E8%AF%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB/15.png" class title="实验结果"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>




]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo博客中添加音乐</title>
    <url>/2019/02/22/0006_%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【痴迷音乐】</p>
<img src="/2019/02/22/0006_%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/2019.2.22.jpg" class title="为我GEM疯狂打call"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
 <span id="more"></span>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>直接到音乐网站中生成外链播放器，就有自动生成如下标签，直接放进md文件中即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;iframe </span><br><span class="line">frameborder=<span class="string">&quot;no&quot;</span> </span><br><span class="line">border=<span class="string">&quot;0&quot;</span> </span><br><span class="line">marginwidth=<span class="string">&quot;0&quot;</span> </span><br><span class="line">marginheight=<span class="string">&quot;0&quot;</span> </span><br><span class="line">width=0 </span><br><span class="line">height=0 </span><br><span class="line">src=<span class="string">&quot;http://streamoc.music.tc.qq.com/M800101A9o5D1EWzyd.mp3?vkey=496F425FDC1F092E0924D5ADD6BA7AA6837C8528BF0696B09AE2DC0FCB8B1CCDCFBFABB6C0EDC11B17B69138025492940BF54F6EA14B310A&amp;guid=MS&amp;fromtag=8&amp;uin=0&quot;</span>&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>


<p>把width&#x3D;和height设置为0，在网页中看不见,但可以自动播放，有点像网页背景音乐。<a href="https://chuang1230.github.io/2019/01/15/2019.1.15.2/#more">点击此处查看具体效果！</a> </p>
<h2 id="方案二【个人推荐】"><a href="#方案二【个人推荐】" class="headerlink" title="方案二【个人推荐】"></a>方案二【个人推荐】</h2><p>使用Hexo插件APlayer！！！</p>
<h3 id="首先在-git-bash中使用命令"><a href="#首先在-git-bash中使用命令" class="headerlink" title="首先在 git bash中使用命令"></a>首先在 git bash中使用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer</span><br></pre></td></tr></table></figure>


<h3 id="使用leancloud"><a href="#使用leancloud" class="headerlink" title="使用leancloud"></a>使用leancloud</h3><p>lencloud可以完美解决图片与音乐外链问题。在leancloud官网注册后，可以选择个人用户开发版，这是免费的！然后在class中找到_File上传自己的音乐和图片，后面会有它的链接，直接copy就行。</p>
<h3 id="在md文件中具体添加音乐"><a href="#在md文件中具体添加音乐" class="headerlink" title="在md文件中具体添加音乐"></a>在md文件中具体添加音乐</h3><p>【添加一首歌】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer <span class="string">&quot;岩石里的花&quot;</span> <span class="string">&quot;邓紫棋&quot;</span> <span class="string">&quot;http://192.168.127.151/cache/3/05/streamoc.music.tc.qq.com/f16436618361cfecc79153b3ba1db01a/M800101A9o5D1EWzyd.mp3?vkey=22981DFD3050B42FAB4296D2E56960739E671E4B24A1F2247633AF232692011F5FC6F16E87CF59F9A26E6DBD50592C9FCE4C15A033F29612&amp;guid=MS&amp;fromtag=8&amp;uin=0&quot;</span> <span class="string">&quot;http://lc-vslfihiq.cn-n1.lcfile.com/9facbadc02822c7cf86c.png&quot;</span> <span class="string">&quot;autoplay&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>


<p>【添加歌曲列表】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;&#123;<span class="string">&quot;narrow&quot;</span>: <span class="literal">false</span>,<span class="string">&quot;autoplay&quot;</span>: <span class="literal">true</span>,<span class="string">&quot;showlrc&quot;</span>: 3,<span class="string">&quot;mode&quot;</span>: <span class="string">&quot;random&quot;</span>,<span class="string">&quot;music&quot;</span>: [</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;岩石里的花&quot;</span>,<span class="string">&quot;author&quot;</span>: <span class="string">&quot;邓紫棋&quot;</span>,<span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://192.168.127.151/cache/3/05/streamoc.music.tc.qq.com/f16436618361cfecc79153b3ba1db01a/M800101A9o5D1EWzyd.mp3?vkey=22981DFD3050B42FAB4296D2E56960739E671E4B24A1F2247633AF232692011F5FC6F16E87CF59F9A26E6DBD50592C9FCE4C15A033F29612&amp;guid=MS&amp;fromtag=8&amp;uin=0&quot;</span>,<span class="string">&quot;pic&quot;</span>: <span class="string">&quot;http://lc-vslfihiq.cn-n1.lcfile.com/9facbadc02822c7cf86c.png&quot;</span>,<span class="string">&quot;lrc&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;睡皇后&quot;</span>,<span class="string">&quot;author&quot;</span>: <span class="string">&quot;邓紫棋&quot;</span>,<span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://lc-vslfihiq.cn-n1.lcfile.com/38e7079c52024b425a12.mp3&quot;</span>,<span class="string">&quot;pic&quot;</span>: <span class="string">&quot;http://lc-vslfihiq.cn-n1.lcfile.com/5910fa54d1d1eb90c1cf.png&quot;</span>,<span class="string">&quot;lrc&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;倒数&quot;</span>,<span class="string">&quot;author&quot;</span>: <span class="string">&quot;邓紫棋&quot;</span>,<span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://lc-vslfihiq.cn-n1.lcfile.com/ee98d8bf7cf6311dc37d.mp3&quot;</span>,<span class="string">&quot;pic&quot;</span>: <span class="string">&quot;http://lc-vslfihiq.cn-n1.lcfile.com/f48f7bc8811115acce16.jpg&quot;</span>,<span class="string">&quot;lrc&quot;</span>: <span class="string">&quot;&quot;</span>&#125;]&#125;&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>

        <div id="aplayer-qjAMTALD" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>
			  <script>
				  var options = {"narrow":false,"autoplay":true,"showlrc":3,"mode":"random","music":[{"title":"岩石里的花","author":"邓紫棋","url":"http://192.168.127.151/cache/3/05/streamoc.music.tc.qq.com/f16436618361cfecc79153b3ba1db01a/M800101A9o5D1EWzyd.mp3?vkey=22981DFD3050B42FAB4296D2E56960739E671E4B24A1F2247633AF232692011F5FC6F16E87CF59F9A26E6DBD50592C9FCE4C15A033F29612&guid=MS&fromtag=8&uin=0","pic":"http://lc-vslfihiq.cn-n1.lcfile.com/9facbadc02822c7cf86c.png","lrc":""},{"title":"睡皇后","author":"邓紫棋","url":"http://lc-vslfihiq.cn-n1.lcfile.com/38e7079c52024b425a12.mp3","pic":"http://lc-vslfihiq.cn-n1.lcfile.com/5910fa54d1d1eb90c1cf.png","lrc":""},{"title":"倒数","author":"邓紫棋","url":"http://lc-vslfihiq.cn-n1.lcfile.com/ee98d8bf7cf6311dc37d.mp3","pic":"http://lc-vslfihiq.cn-n1.lcfile.com/f48f7bc8811115acce16.jpg","lrc":""}]};
				  options.element = document.getElementById("aplayer-qjAMTALD");
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  </script>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>便捷存放</title>
    <url>/2019/03/22/0007_%E4%BE%BF%E6%8D%B7%E5%AD%98%E6%94%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【持续补充】<br>【不想带U盘，不想搞ftp，不想搞远程桌面】</p>
 <span id="more"></span>



<h2 id="截屏-录视频"><a href="#截屏-录视频" class="headerlink" title="截屏+录视频"></a>截屏+录视频</h2><p>实验室电脑都没有截屏，真的是麻烦!<br><a href="http://lc-jujabo3e.cn-n1.lcfile.com/c8166434c297f06bf43e.zip">fscapture85.zip</a></p>
<h2 id="油猴实用脚本"><a href="#油猴实用脚本" class="headerlink" title="油猴实用脚本"></a>油猴实用脚本</h2><p><a href="http://lc-jujabo3e.cn-n1.lcfile.com/a8d9006ecefcda919abe.zip">tampermokey</a></p>
<h2 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h2><p><a href="http://lc-jujabo3e.cn-n1.lcfile.com/fb1c80582428a9de5485.rar">ocr</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://lc-jujabo3e.cn-n1.lcfile.com/002b494276d275b02fd7.rar">android</a><br><a href="http://lc-jujabo3e.cn-n1.lcfile.com/56ed13b97cb251a46f7a.zip">window64</a><br><a href="http://lc-jujabo3e.cn-n1.lcfile.com/467d7208031ec613de0c.rar">window_2</a></p>
<h2 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h2><p>1.<a href="https://www.processon.com/">在线作图网站</a><br>2.<a href="https://www.bilibili.com/video/av41572620">数据结构-清华大学邓俊辉</a><br>3.<a href="https://github.com/inferjay/AndroidDevTools#sdk-tools">Android开发</a><br>4.<a href="http://www.ipol.im/">图像处理周刊</a><br>5.<a href="https://github.com/CyC2018/CS-Notes">基础知识</a><br>6.<a href="http://www.pythonchallenge.com/">python挑战</a><br>  做网站上面的题目。如果卡在某一关太久, 可以看答案(google python challenge answer), 做完后看看别人的编码方式和自己有什么区别。</p>
]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>soundex算法的实现</title>
    <url>/2019/04/10/0008_soundex%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/04/10/0008_soundex%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/1.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h2 id="soundex算法"><a href="#soundex算法" class="headerlink" title="soundex算法"></a>soundex算法</h2><p>soundex是一种语音算法，利用英文字的读音计算近似值，值由四个字符构成，第一个字符为英文字母，后三个为数字。在拼音文字中有时会有会念但不能拼出正确字的情形，可用soundex做类似模糊匹配的效果。例如knuth和kant二个字符串，它们的soundex值都是“k530”。</p>
<span id="more"></span>
<h2 id="算法基本思路"><a href="#算法基本思路" class="headerlink" title="算法基本思路"></a>算法基本思路</h2><p>1.保留第一个字母，去掉第一个字母之后的所有的a, e, i, o, u, y, h, w；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">word=word.lower() #转换为小写</span><br><span class="line">word1=word[1:]    #获取第一个字母后的切片</span><br><span class="line">word1 = re.sub(&#x27;[aeiouyhw]&#x27;,&#x27;&#x27;,word1) #去除元音字母</span><br></pre></td></tr></table></figure>

<p>2.将英文字按以下规则替换（除第一个字符外）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b f p v -&gt; 1</span><br><span class="line">c g j k q s x z -&gt; 2</span><br><span class="line">d t -&gt; 3</span><br><span class="line">l -&gt; 4</span><br><span class="line">m n -&gt; 5</span><br><span class="line">r -&gt; 6</span><br></pre></td></tr></table></figure>

<p>3.对于相邻的重复的数字只保留一个，即相邻的两个被替换为同一个数字的字母只保留一个；</p>
<p>4.保留第一个字母后的三位数字，若不足三位则以0补足。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#去除重复</span><br><span class="line">for i in range(1,len(result)):</span><br><span class="line">  if i&lt;=3:</span><br><span class="line">    result1+=result[i]</span><br><span class="line">if len(result)-1&lt;3:</span><br><span class="line">  time=3-(len(result)-1)</span><br><span class="line">  #补0</span><br><span class="line">  for i in range(0,time):</span><br><span class="line">    result1+=&#x27;0&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="Python的实现"><a href="#Python的实现" class="headerlink" title="Python的实现"></a>Python的实现</h2><p>完整代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">def soundex(word):</span><br><span class="line">    word=word.lower()</span><br><span class="line">    result=word[0]</span><br><span class="line">    word1=word[1:]</span><br><span class="line">    word1 = re.sub(&#x27;[aeiouyhw]&#x27;,&#x27;&#x27;,word1)</span><br><span class="line">    for char in word1:</span><br><span class="line">        if char==&#x27;b&#x27; or char==&#x27;f&#x27; or char==&#x27;p&#x27;or char==&#x27;v&#x27;:</span><br><span class="line">            result+=&#x27;1&#x27;</span><br><span class="line">        elif char==&#x27;c&#x27; or char==&#x27;g&#x27; or char==&#x27;j&#x27; or char==&#x27;k&#x27; or char==&#x27;q&#x27; or char==&#x27;s&#x27; or char==&#x27;x&#x27; or char==&#x27;z&#x27;:</span><br><span class="line">            result+=&#x27;2&#x27;</span><br><span class="line">        elif char==&#x27;d&#x27; or char==&#x27;t&#x27;:</span><br><span class="line">            result+=&#x27;3&#x27;</span><br><span class="line">        elif char==&#x27;l&#x27;:</span><br><span class="line">            result+=&#x27;4&#x27;</span><br><span class="line">        elif char==&#x27;m&#x27; or char==&#x27;n&#x27;:</span><br><span class="line">            result+=&#x27;5&#x27;</span><br><span class="line">        elif char==&#x27;r&#x27;:</span><br><span class="line">            result+=&#x27;6&#x27;</span><br><span class="line">    print(&#x27;first_changed_without_control:&#x27;,result)</span><br><span class="line">    result1=result[0]</span><br><span class="line">    for i in range(1,len(result)):</span><br><span class="line">        if i&lt;=3:</span><br><span class="line">            result1+=result[i]</span><br><span class="line">    if len(result)-1&lt;3:</span><br><span class="line">        time=3-(len(result)-1)</span><br><span class="line">        for i in range(0,time):</span><br><span class="line">            result1+=&#x27;0&#x27;</span><br><span class="line">    print(&#x27;second_changed_with_control:  &#x27;,result1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    #乱打的测试</span><br><span class="line">    soundex(&#x27;kdsadasnh&#x27;)</span><br><span class="line">    soundex(&#x27;dsaddas&#x27;)</span><br><span class="line">    #正常测试</span><br><span class="line">    soundex(&#x27;Knuth&#x27;)</span><br><span class="line">    soundex(&#x27;Kant&#x27;)</span><br><span class="line">    soundex(&#x27;Jarovski&#x27;)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">first_changed_without_control: k32325</span><br><span class="line">second_changed_with_control:   k323</span><br><span class="line">first_changed_without_control: d2332</span><br><span class="line">second_changed_with_control:   d233</span><br><span class="line">first_changed_without_control: k53</span><br><span class="line">second_changed_with_control:   k530</span><br><span class="line">first_changed_without_control: k53</span><br><span class="line">second_changed_with_control:   k530</span><br><span class="line">first_changed_without_control: j6122</span><br><span class="line">second_changed_with_control:   j612</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Endgame</title>
    <url>/2019/06/30/0009_Endgame/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/06/30/0009_Endgame/1.jpg" class title="单纯记录一下Avengers"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

 <span id="more"></span>



<video src="http://lc-jujabo3e.cn-n1.lcfile.com/0841a813c13bb0712779/Avengers1.mp4" type="video/mp4" controls="controls" width="100%" height="80%">
</video>


<video src="http://lc-jujabo3e.cn-n1.lcfile.com/50f1b6415a32ff47560b/Avengers2.mp4" type="video/mp4" controls="controls" width="100%" height="80%">
</video>

<video src="http://lc-jujabo3e.cn-n1.lcfile.com/381b8577f69fbfa43633/Avengers3.mp4" type="video/mp4" controls="controls" width="100%" height="80%">
</video>
   

<video src="http://lc-jujabo3e.cn-n1.lcfile.com/b0f9ce84a5e4026718e5/Avengers4.mp4" type="video/mp4" controls="controls" width="100%" height="80%">
</video>


<video src="http://lc-jujabo3e.cn-n1.lcfile.com/2b236c590920097595cd/Avengers5.mp4" type="video/mp4" controls="controls" width="100%" height="80%">
</video>

<img src="/2019/06/30/0009_Endgame/2.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>重复度计算</title>
    <url>/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/1.jpg" class title="诗咏真系好靓"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>【需求：比较6个商业项目的品牌重合度】</p>
<p>一开始接到时就有几个想法，现在实现了一下，看看哪种的效率高点？</p>
 <span id="more"></span>

<h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><p>1、用python来实现【5分钟搞定！】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把品牌放进列表中，用set函数去除重复的品牌，再去求项目品牌的交集，最后用项目品牌的交集除以项目品牌的并集，得出重合率</span><br></pre></td></tr></table></figure>

<p>2、用Excel的函数实现【这种方法最后花了一个早上才搞定6个项目，我哭了！】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用WPS自带的删除重复项去除重复品牌;</span><br><span class="line">判断是否重合：IF(COUNTIF(A:A,B1)=1,&quot;1&quot;,&quot;没有重合&quot;)，即拿B1跟A列做对比，如果相同的个数为1，则显示1，否则就显示没有重合 ;</span><br><span class="line">重合品牌的数量：COUNTIF(C$2:C$31,1)计算该列的1出现的次数；</span><br><span class="line">重合度计算： （A项目和B项目品牌的交集 / A项目和B项目品牌的并集 ）*100% ;</span><br></pre></td></tr></table></figure>

<p>​	</p>
<h2 id="实现一：python实现"><a href="#实现一：python实现" class="headerlink" title="实现一：python实现"></a>实现一：python实现</h2><img src="/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/2.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h3 id="读取excel中的数据"><a href="#读取excel中的数据" class="headerlink" title="读取excel中的数据"></a>读取excel中的数据</h3><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>使用xlrd库读取excel中的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开excel</span></span><br><span class="line">data1 = xlrd.open_workbook(<span class="string">&#x27;重合度python实现.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># sheet数</span></span><br><span class="line">table = data1.sheets()[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 行数</span></span><br><span class="line">nrows = table.nrows </span><br><span class="line"><span class="comment"># 列数</span></span><br><span class="line">ncols = table.ncols</span><br><span class="line"></span><br><span class="line"><span class="built_in">all</span> = []</span><br><span class="line"><span class="comment">#读取每一列的数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">    col_values = table.col_values(i)</span><br><span class="line">    <span class="comment"># 去除空元素</span></span><br><span class="line">    k = [j <span class="keyword">for</span> j <span class="keyword">in</span> col_values <span class="keyword">if</span> j != <span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    <span class="comment"># 去除项目名（非品牌数据）</span></span><br><span class="line">    k.remove(k[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">all</span>.append(k)</span><br></pre></td></tr></table></figure>

<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;Apple Store&#x27;, &#x27;H&amp;M&#x27;, &#x27;JINS&#x27;, &#x27;煮葉&#x27;, ......]</span><br></pre></td></tr></table></figure>


<h3 id="重合度计算"><a href="#重合度计算" class="headerlink" title="重合度计算"></a>重合度计算</h3><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><p>用set函数去除列表中的重复数据，利用set的union函数求并集，同时也可以用set的intersection函数求交集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">contact_ratio</span>(<span class="params">Lista, Listb</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交集</span></span><br><span class="line">    k1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> Lista <span class="keyword">if</span> i <span class="keyword">in</span> Listb]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 并集</span></span><br><span class="line">    k2 = <span class="built_in">list</span>(<span class="built_in">set</span>(Lista).union(<span class="built_in">set</span>(Listb)))</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">len</span>(k1)/<span class="built_in">len</span>(k2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> k1,k2,result</span><br></pre></td></tr></table></figure>



<h4 id="All-Codes"><a href="#All-Codes" class="headerlink" title="All_Codes"></a>All_Codes</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contact_ratio</span>(<span class="params">Lista, Listb</span>):</span><br><span class="line">    k1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> Lista <span class="keyword">if</span> i <span class="keyword">in</span> Listb]</span><br><span class="line">    k2 = <span class="built_in">list</span>(<span class="built_in">set</span>(Lista).union(<span class="built_in">set</span>(Listb)))</span><br><span class="line">    result = <span class="built_in">len</span>(k1)/<span class="built_in">len</span>(k2)</span><br><span class="line">    <span class="keyword">return</span> k1, k2, result</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data1 = xlrd.open_workbook(<span class="string">&#x27;重合度python实现.xlsx&#x27;</span>)</span><br><span class="line">    table = data1.sheets()[<span class="number">0</span>]</span><br><span class="line">    nrows = table.nrows</span><br><span class="line">    ncols = table.ncols</span><br><span class="line">    <span class="built_in">all</span> = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">        col_values = table.col_values(i)</span><br><span class="line">        k = [j <span class="keyword">for</span> j <span class="keyword">in</span> col_values <span class="keyword">if</span> j != <span class="string">&#x27;&#x27;</span>]</span><br><span class="line">        k.remove(k[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">all</span>.append(k)</span><br><span class="line">    A, B, C =contact_ratio(<span class="built_in">all</span>[<span class="number">0</span>], <span class="built_in">all</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;交集=&quot;</span>, A)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;并集=&quot;</span>, B)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;重合度=&quot;</span>, <span class="built_in">format</span>(C, <span class="string">&#x27;0.13%&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h4 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h4><img src="/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/3.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>





<h2 id="实现二：excel实现"><a href="#实现二：excel实现" class="headerlink" title="实现二：excel实现"></a>实现二：excel实现</h2><h4 id="删除重复项"><a href="#删除重复项" class="headerlink" title="删除重复项"></a>删除重复项</h4><img src="/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/4.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h4 id="判断是否重合"><a href="#判断是否重合" class="headerlink" title="判断是否重合"></a>判断是否重合</h4><p>使用excel的公式 IF(COUNTIF(A:A,B1)&#x3D;1,”1”,”没有重合”)；</p>
<p>公式解析：拿B1单元格跟A列的数据做对比，如果相同的个数为1，则显示1，否则就显示没有重合 ;如果没有做第一步的去重的话，COUNTIF函数可能返回会2，3 …等大于1的结果，影响IF函数的结果；</p>
<p>具体情况具体分析：这里第一行的数据是项目的名字，所以具体的使用公式是IF(COUNTIF(B$2:B$804,A2)&#x3D;1,”1”,”没有重合”)，然后用十字下拉即可</p>
<img src="/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/5.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>



<h4 id="重合品牌的数量"><a href="#重合品牌的数量" class="headerlink" title="重合品牌的数量"></a>重合品牌的数量</h4><p>COUNTIF(C$2:C$31,1)计算前面判断是否重合公司那一列的1出现的次数，这里既是两个项目品牌的交集</p>
<img src="/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/6.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h4 id="重合度计算："><a href="#重合度计算：" class="headerlink" title="重合度计算："></a>重合度计算：</h4><p>（A项目品牌 交 B项目品牌 &#x2F; A项目品牌 并 B项目品牌 ）*100%</p>
<p>具体情况具体分析：A项目和B项目品牌的并集 &#x3D; A项目品牌的数量+ B项目品牌 - A项目和B项目品牌的交集</p>
<img src="/2019/07/14/0010_%E9%87%8D%E5%A4%8D%E5%BA%A6%E8%AE%A1%E7%AE%97/7.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h4 id="Excel的实现文件"><a href="#Excel的实现文件" class="headerlink" title="Excel的实现文件"></a>Excel的实现文件</h4><p>顺便放上<a href="http://lc-jujabo3e.cn-n1.lcfile.com/2a701c82d52afbc636db/%E9%87%8D%E5%90%88%E5%BA%A6python%E5%AE%9E%E7%8E%B0.xlsx">重合度python实现.xlsx</a>这文件吧</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python excel 数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python调用百度OCR</title>
    <url>/2019/07/14/0011_Python%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6OCR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/07/14/0011_Python%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6OCR/1.jpg" class title="你要记住这句话"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>字母+数字的文字识别现在自己还是可以做到的，但是中文的文字识别就很难了。所以平时遇到这种需求时，直接调用大厂的文字识别OCR效率更高点。<br> <span id="more"></span></p>
<p>这里调用百度的OCR主要实现的是对网络上一些表格图片进行文字识别。</p>
<img src="/2019/07/14/0011_Python%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6OCR/test1.png" class title="之后要识别的图片"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<h3 id="在百度云开放平台创建应用"><a href="#在百度云开放平台创建应用" class="headerlink" title="在百度云开放平台创建应用"></a>在百度云开放平台创建应用</h3><img src="/2019/07/14/0011_Python%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6OCR/3.png" class title="百度官方使用说明"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h5 id="获取API-KEY和Secret-Key"><a href="#获取API-KEY和Secret-Key" class="headerlink" title="获取API KEY和Secret Key"></a>获取API KEY和Secret Key</h5><p>进入<a href="https://ai.baidu.com/tech/OCR">百度AI开放平台</a>的文字识别板块，然后创建应用，获得API KEY和Secret Key；</p>
<img src="/2019/07/14/0011_Python%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6OCR/2.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h3 id="授权字符串Access-Token"><a href="#授权字符串Access-Token" class="headerlink" title="授权字符串Access Token"></a>授权字符串Access Token</h3><p>Token是使用API的第一步！Access Token就是在每次向服务器发送的请求里面加上这个你个人专属的密码，这个密码由别人API的创建者决定；有可能一个token会十分复杂不过这个部分还好，基本每个开发者都会写说明文档来介绍如何使用。</p>
<h5 id="code"><a href="#code" class="headerlink" title="code"></a>code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import ssl, sys</span><br><span class="line"></span><br><span class="line"># 官网host解析</span><br><span class="line"># client_id 为官网获取的AK， client_secret 为官网获取的SK</span><br><span class="line">host = &#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=【官网获取的AK】&amp;client_secret=【官网获取的SK】&#x27;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;</span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=host, headers=headers).json()</span><br><span class="line">print(res[&#x27;access_token&#x27;])</span><br></pre></td></tr></table></figure>

<p>把获取到access_token保存一下，注意：百度OCR获取的access_token有效期为30天，需要每30天进行定期更换；</p>
<h3 id="开始调用表格文字识别API（异步接口）"><a href="#开始调用表格文字识别API（异步接口）" class="headerlink" title="开始调用表格文字识别API（异步接口）"></a>开始调用表格文字识别API（异步接口）</h3><h5 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">import ssl, sys</span><br><span class="line"></span><br><span class="line">url = &#x27;https://aip.baidubce.com/rest/2.0/solution/v1/form_ocr/request&#x27;</span><br><span class="line"></span><br><span class="line">data = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 上面获得access_token</span><br><span class="line">data[&#x27;access_token&#x27;] = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># 读取图片</span><br><span class="line">file = open(&#x27;test1.png&#x27;, &#x27;rb&#x27;)</span><br><span class="line">image = file.read()</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"># 进行编码</span><br><span class="line">data[&#x27;image&#x27;] = base64.b64encode(image)</span><br><span class="line"></span><br><span class="line">#写自己API KEY</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url=url, headers=headers, data=data)</span><br><span class="line"></span><br><span class="line">print(res.json())</span><br></pre></td></tr></table></figure>

<h5 id="请求URL"><a href="#请求URL" class="headerlink" title="请求URL"></a>请求URL</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://aip.baidubce.com/rest/2.0/solution/v1/form_ocr/request</span><br></pre></td></tr></table></figure>

<h5 id="Headers说明"><a href="#Headers说明" class="headerlink" title="Headers说明"></a>Headers说明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;apikey&quot;: &quot;&quot;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h5><p>百度OCR对图片的要求是需要base64编码、去掉编码头后再进行urlencode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[&#x27;image&#x27;] = base64.b64encode(image)</span><br></pre></td></tr></table></figure>
<p>还有access_token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[&#x27;access_token&#x27;] = &#x27;**************&#x27;</span><br></pre></td></tr></table></figure>
<h5 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h5><p>这里是返回的参数</p>
<img src="/2019/07/14/0011_Python%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6OCR/4.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h3 id="调用接口获取结果"><a href="#调用接口获取结果" class="headerlink" title="调用接口获取结果"></a>调用接口获取结果</h3><h5 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import ssl, sys</span><br><span class="line"></span><br><span class="line">url = &#x27;https://aip.baidubce.com/rest/2.0/solution/v1/form_ocr/get_request_result&#x27;</span><br><span class="line"></span><br><span class="line">data = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 上面获得access_token</span><br><span class="line">data[&#x27;access_token&#x27;] = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># 上面获得request_id</span><br><span class="line">data[&#x27;request_id&#x27;] = &#x27;15347521_1068276&#x27;</span><br><span class="line"></span><br><span class="line">#可以获得josn和excel两种结果</span><br><span class="line">data[&#x27;result_type&#x27;] =&#x27;excel&#x27;</span><br><span class="line"></span><br><span class="line">#写自己API KEY</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;apikey&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url=url, headers=headers, data=data)</span><br><span class="line"></span><br><span class="line">print(res.json())</span><br></pre></td></tr></table></figure>
<h5 id="请求URL-1"><a href="#请求URL-1" class="headerlink" title="请求URL"></a>请求URL</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://aip.baidubce.com/rest/2.0/solution/v1/form_ocr/get_request_result</span><br></pre></td></tr></table></figure>

<h5 id="Headers说明-1"><a href="#Headers说明-1" class="headerlink" title="Headers说明"></a>Headers说明</h5><p>使用获得的API KEY</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;apikey&quot;: &quot;&quot;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="请求参数-1"><a href="#请求参数-1" class="headerlink" title="请求参数"></a>请求参数</h5><p>使用上一步获得的request_id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[&#x27;request_id&#x27;] = &#x27;15347521_1068276&#x27;</span><br></pre></td></tr></table></figure>
<p>期望获取结果的类型，取值为“excel”时返回xls文件的地址，取值为“json”时返回json格式的字符串,默认为“excel”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[&#x27;result_type&#x27;] =&#x27;excel&#x27;</span><br></pre></td></tr></table></figure>
<h5 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h5><p>这里是返回的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;result&#x27;: &#123;&#x27;result_data&#x27;: &#x27;http://bj.bcebos.com/v1/aip-web/form_ocr/67ACBFCCC3C24A79A7161DC2F3A05D29.xls?authorization=bce-auth-v1%2Ff86a2044998643b5abc89b59158bad6d%2F2019-07-05T09%3A17%3A41Z%2F86400%2F%2F49456aa34ec7ed98e00ebb9cef40a6272fb63354dc25b770326055a4fe237245&#x27;, &#x27;ret_msg&#x27;: &#x27;已完成&#x27;, &#x27;request_id&#x27;: &#x27;15347521_1068276&#x27;, &#x27;percent&#x27;: 100, &#x27;ret_code&#x27;: 3&#125;, &#x27;log_id&#x27;: 15623183058743806&#125;</span><br></pre></td></tr></table></figure>
<p>最后的url我们点进去下载excel，该<a href="http://lc-jujabo3e.cn-n1.lcfile.com/213a518f3aba56adcd5d/%E5%9B%BE%E7%89%87test1%E8%8E%B7%E5%BE%97%E7%9A%84%E7%BB%93%E6%9E%9C.xls">excel</a>就是我们文字识别的最终结果</p>
<img src="/2019/07/14/0011_Python%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6OCR/5.png" class title="result"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>稍微修改一下可以做其他图片的文字识别，不同图片文本对于不同的请求URL和参数，需要去自己去官网看文档。最主要的这个OCR也可以做为反爬验证码的识别，有空再搞这个吧</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>OCR</tag>
      </tags>
  </entry>
  <entry>
    <title>Python调用高德API批量获得经纬度</title>
    <url>/2019/07/14/0012_Python%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7API%E6%89%B9%E9%87%8F%E8%8E%B7%E5%BE%97%E7%BB%8F%E7%BA%AC%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/07/14/0012_Python%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7API%E6%89%B9%E9%87%8F%E8%8E%B7%E5%BE%97%E7%BB%8F%E7%BA%AC%E5%BA%A6/1.jpg" class title="希望你把心交给我"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>做热力图时发现很多平台都需要经纬度 <span id="more"></span>，话不多说，开始搬砖。</p>
<h3 id="在高德开放平台创建应用"><a href="#在高德开放平台创建应用" class="headerlink" title="在高德开放平台创建应用"></a>在高德开放平台创建应用</h3><p>进入<a href="https://lbs.amap.com/api/webservice/guide/api/georegeo">高德开放平台的接口文档</a>仔细研究其需要的请求参数等信息</p>
<img src="/2019/07/14/0012_Python%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7API%E6%89%B9%E9%87%8F%E8%8E%B7%E5%BE%97%E7%BB%8F%E7%BA%AC%E5%BA%A6/3.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h5 id="获取Key"><a href="#获取Key" class="headerlink" title="获取Key"></a>获取Key</h5><p>进入<a href="https://lbs.amap.com/">高德开放平台</a>的控制台，然后创建应用，获得Web服务API类型的Key；</p>
<img src="/2019/07/14/0012_Python%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7API%E6%89%B9%E9%87%8F%E8%8E%B7%E5%BE%97%E7%BB%8F%E7%BA%AC%E5%BA%A6/4.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h3 id="在高德开放平台创建应用-1"><a href="#在高德开放平台创建应用-1" class="headerlink" title="在高德开放平台创建应用"></a>在高德开放平台创建应用</h3><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_location(address, i):</span><br><span class="line">    print(i)</span><br><span class="line">    url = &quot;http://restapi.amap.com/v3/geocode/geo&quot;</span><br><span class="line">    data = &#123;</span><br><span class="line">        &#x27;key&#x27;: &#x27;&#x27;,</span><br><span class="line">        &#x27;address&#x27;: address</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, data=data).json()</span><br></pre></td></tr></table></figure>

<h5 id="请求URL"><a href="#请求URL" class="headerlink" title="请求URL"></a>请求URL</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://restapi.amap.com/v3/geocode/geo</span><br></pre></td></tr></table></figure>

<h5 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h5><p>key和address这两项是必须要填的，其他参数请看接口文档。address的规则遵循：国家、省份、城市、区县、城镇、乡村、街道、门牌号码、屋邨、大厦，如：北京市朝阳区阜通东大街6号。如果需要解析多个地址的话，请用”|”进行间隔，并且将 batch 参数设置为 true，最多支持 10 个地址进进行”|”分割形式的请求。这里一次只解析一个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">        &#x27;key&#x27;: &#x27;&#x27;,</span><br><span class="line">        &#x27;address&#x27;: address</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h5><p>得到的数据是Json格式的，经纬度在geocodes的location中可以找到</p>
<img src="/2019/07/14/0012_Python%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7API%E6%89%B9%E9%87%8F%E8%8E%B7%E5%BE%97%E7%BB%8F%E7%BA%AC%E5%BA%A6/5.png" class title="result"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<h3 id="All-Codes"><a href="#All-Codes" class="headerlink" title="All Codes"></a>All Codes</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import codecs</span><br><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line"># 把获得数据写入excel</span><br><span class="line">wb = Workbook()</span><br><span class="line">sheet = wb.active</span><br><span class="line">sheet.title = &quot;qiang&quot;</span><br><span class="line"></span><br><span class="line">def get_location(address, i):</span><br><span class="line">    print(i)</span><br><span class="line">    # 请求url</span><br><span class="line">    url = &quot;http://restapi.amap.com/v3/geocode/geo&quot;</span><br><span class="line"></span><br><span class="line">    # 请求数据</span><br><span class="line">    data = &#123;</span><br><span class="line">        &#x27;key&#x27;: &#x27;&#x27;,</span><br><span class="line">        &#x27;address&#x27;: address</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, data=data).json()</span><br><span class="line">    sheet[&quot;A&#123;0&#125;&quot;.format(i)].value = address.strip(&#x27;\n&#x27;)</span><br><span class="line">    print(r)</span><br><span class="line"></span><br><span class="line">    # 只把json中需要的数据写入excel</span><br><span class="line">    if r[&#x27;status&#x27;] == &#x27;1&#x27;:</span><br><span class="line">        if len(r[&#x27;geocodes&#x27;]) &gt; 0:</span><br><span class="line">            GPS = r[&#x27;geocodes&#x27;][0][&#x27;location&#x27;]</span><br><span class="line">            sheet[&quot;B&#123;0&#125;&quot;.format(i)].value = GPS</span><br><span class="line">            sheet[&quot;C&#123;0&#125;&quot;.format(i)].value = r[&#x27;geocodes&#x27;][0][&#x27;formatted_address&#x27;]</span><br><span class="line">        else:</span><br><span class="line">            sheet[&quot;B&#123;0&#125;&quot;.format(i)].value = &#x27;[]&#x27;</span><br><span class="line">    else:</span><br><span class="line">       sheet[&quot;B&#123;0&#125;&quot;.format(i)].value = &#x27;未找到&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获得地址</span><br><span class="line">f = codecs.open(r&quot;sjz2.txt&quot;, &quot;r&quot;)</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">while True:</span><br><span class="line">    line = f.readline()</span><br><span class="line">    i = i + 1</span><br><span class="line">    if not line:</span><br><span class="line">        f.close()</span><br><span class="line">        wb.save(r&quot;sjz2.xlsx&quot;)</span><br><span class="line">        break</span><br><span class="line">    get_location(line, i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>高德API</tag>
        <tag>经纬度</tag>
      </tags>
  </entry>
  <entry>
    <title>Python计算两个经纬度之间的距离</title>
    <url>/2019/07/14/0013_Python%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/07/14/0013_Python%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/1.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<p>【需求：计算多个居住地与工作地到本次案例的距离】</p>
<span id="more"></span>

<h3 id="读取经纬度地址的数据"><a href="#读取经纬度地址的数据" class="headerlink" title="读取经纬度地址的数据"></a>读取经纬度地址的数据</h3><img src="/2019/07/14/0013_Python%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/2.png" class title="Excel中的数据"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<p>这一步把excel中经纬度数据存储到列表中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def read_excel():</span><br><span class="line">    ExcelFile=xlrd.open_workbook(r&#x27;E:\\python_pratice\\July6_project\\dizhi_zhuan_jingweidu_juli_jisuan\\2.xlsx&#x27;)</span><br><span class="line">    #print (ExcelFile.sheet_names())</span><br><span class="line">    sheet = ExcelFile.sheet_by_index(0)</span><br><span class="line">    address = sheet.col_values(0)</span><br><span class="line">    jingweidu=sheet.col_values(1)</span><br><span class="line">    for i in range(0,len(jingweidu)):</span><br><span class="line">        print(i)</span><br><span class="line">        s1=sheet.cell(i, 1).value</span><br><span class="line">        print(s1)</span><br><span class="line">        B.append(s1)</span><br></pre></td></tr></table></figure>

<h3 id="计算两个经纬度之间的距离"><a href="#计算两个经纬度之间的距离" class="headerlink" title="计算两个经纬度之间的距离"></a>计算两个经纬度之间的距离</h3><p>计算经纬度之间的距离有多种方法，比如Great-Circle距离（基于球面余弦公式）和基于Haversine公式 等。这些方法考虑的要点都很多，实际应用计算保留几位小数的情况下可以使用以下我使用的方法，要想十分精确，那就请</p>
<img src="/2019/07/14/0013_Python%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/4.png" class title="出门右转，Google一下"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<h4 id="基于Haversine公式计算距离"><a href="#基于Haversine公式计算距离" class="headerlink" title="基于Haversine公式计算距离"></a>基于Haversine公式计算距离</h4><img src="/2019/07/14/0013_Python%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/3.jpg" class title="经纬度计算距离公式"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<h4 id="公式解析"><a href="#公式解析" class="headerlink" title="公式解析"></a>公式解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Lung1 Lat1表示A点经纬度， Lung2 Lat2表示B点经纬度；</span><br><span class="line">a=Lat1-Lat2 为两点纬度之差 b=Lung1-Lung2 为两点经度之差；</span><br><span class="line">6378.137为地球半径，单位为千米；</span><br><span class="line">计算出来的结果单位为千米，若将半径改为米为单位则计算的结果单位为米</span><br><span class="line">计算精度与谷歌地图的距离精度差不多，相差范围在0.2米以下</span><br></pre></td></tr></table></figure>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def distance_calc_two(startloc , endloc):</span><br><span class="line">    startloc = startloc + &#x27;,&#x27; + endloc</span><br><span class="line"></span><br><span class="line">    # 将十进制度数转化为弧度</span><br><span class="line">    lon1 , lat1 ,lon2 , lat2 = map(radians,[float(i) for i in startloc.split(&#x27;,&#x27;)])</span><br><span class="line">    </span><br><span class="line">    # haversine公式</span><br><span class="line">    dlon = lon2 - lon1</span><br><span class="line">    dlat = lat2 - lat1</span><br><span class="line">    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2</span><br><span class="line">    c = 2 * asin(sqrt(a))</span><br><span class="line">    </span><br><span class="line">    # 地球平均半径</span><br><span class="line">    r = 6371</span><br><span class="line">    finally_result = str(&#x27;%.3f&#x27;%(r * c))</span><br><span class="line">    distance.append(finally_result)</span><br><span class="line">    print(finally_result + u&#x27;公里&#x27;)</span><br></pre></td></tr></table></figure>
<p>startloc和endloc这两个参数为起点与终点的经纬度，之后将经纬度转为弧度，方便之后的计算，最后就是实现haversine公式。</p>
<p>注意：这里r的取值也可以精确到6378.137，视自己情况而定。</p>
<h3 id="All-Codes"><a href="#All-Codes" class="headerlink" title="All Codes"></a>All Codes</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from math import radians,sin,cos,asin,sqrt</span><br><span class="line">import xlrd</span><br><span class="line"></span><br><span class="line">distance=[]</span><br><span class="line">B=[]</span><br><span class="line">def distance_calc_two(startloc , endloc):</span><br><span class="line">    startloc = startloc + &#x27;,&#x27; + endloc</span><br><span class="line">    lon1 , lat1 ,lon2 , lat2 = map(radians,[float(i) for i in startloc.split(&#x27;,&#x27;)])</span><br><span class="line">    #print(lon1,lat1,lon2,lat2)</span><br><span class="line">    dlon = lon2 - lon1</span><br><span class="line">    dlat = lat2 - lat1</span><br><span class="line">    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2</span><br><span class="line">    c = 2 * asin(sqrt(a))</span><br><span class="line">    r = 6371</span><br><span class="line">    finally_result = str(&#x27;%.3f&#x27;%(r * c))</span><br><span class="line">    distance.append(finally_result)</span><br><span class="line"></span><br><span class="line">def read_excel():</span><br><span class="line">    ExcelFile=xlrd.open_workbook(r&#x27;E:\\python_pratice\\July6_project\\dizhi_zhuan_jingweidu_juli_jisuan\\2.xlsx&#x27;)</span><br><span class="line">    sheet = ExcelFile.sheet_by_index(0)</span><br><span class="line">    address = sheet.col_values(0)</span><br><span class="line">    jingweidu=sheet.col_values(1)</span><br><span class="line">    for i in range(0,len(jingweidu)):</span><br><span class="line">        s1=sheet.cell(i, 1).value</span><br><span class="line">        B.append(s1)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    startloc=&#x27;114.504952,38.045749&#x27;</span><br><span class="line">    read_excel()</span><br><span class="line">    for i in B:</span><br><span class="line">        distance_calc_two(startloc,i)</span><br><span class="line">    print(distance)</span><br><span class="line">    with open(&#x27;3.txt&#x27;,&#x27;w&#x27;) as f:</span><br><span class="line">        for i in distance:</span><br><span class="line">            f.write(i+&#x27;\n&#x27;)</span><br></pre></td></tr></table></figure>
<p>最后结果如下：</p>
<img src="/2019/07/14/0013_Python%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/5.png" class title="result"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>经纬度</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu14.4下netease-cloud-music的安装与卸载</title>
    <url>/2019/04/15/0014_ubuntu14.4%E4%B8%8Bnetease-cloud-music%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装包的下载"><a href="#安装包的下载" class="headerlink" title="安装包的下载"></a>安装包的下载</h2><p>重新打开浏览器，copy链接就可以自动下载安装包</p>
<p>Ubuntu 14.04 64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1.music.126.net/download/pc/netease-cloud-music_1.0.0_amd64_ubuntu14.04.deb</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>Ubuntu 14.04 32</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1.music.126.net/download/pc/netease-cloud-music_1.0.0_i386_ubuntu14.04.deb</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先到下载目录下ls查看是否存在安装包，再使用安装命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i  netease-cloud-music_1.0.0_amd64_ubuntu14.04.deb</span><br></pre></td></tr></table></figure>

<h2 id="出现错误"><a href="#出现错误" class="headerlink" title="出现错误"></a>出现错误</h2><p>错误原因</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg: error processing package netease-cloud-music (--install):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br></pre></td></tr></table></figure>

<p>配置依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure>

<p>重新安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i  netease-cloud-music_1.0.0_amd64_ubuntu14.04.deb</span><br></pre></td></tr></table></figure>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>查询软件包是否存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -l | grep netease-cloud-music</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove netease-cloud-music</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>save_photo</title>
    <url>/2025/02/14/0015_save_photo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近生活状态：在龙场悟道中……</p>
<iframe frameborder="yes" border="0" marginwidth="0" marginheight="0" allow="autoplay" width="600" height="100" src="https://i.y.qq.com/n2/m/outchain/player/index.html?songid=370870476&songtype=0">
</iframe>

<p>工作时间发现写了很多MD基本都是敏感信息，以后就转娱乐博客，记录一下生活好了。</p>
<img src="/2025/02/14/0015_save_photo/1.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<img src="/2025/02/14/0015_save_photo/2.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<img src="/2025/02/14/0015_save_photo/3.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
<img src="/2025/02/14/0015_save_photo/4.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>GEM</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS</title>
    <url>/2019/04/16/0016_VPS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/04/16/0016_VPS/1.jpg" class title="我超凶的"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<h2 id="vultr服务器"><a href="#vultr服务器" class="headerlink" title="vultr服务器"></a>vultr服务器</h2><p>点击 <a href="https://www.vultr.com/">https://www.vultr.com/</a>  进入官网注册。</p>
<span id="more"></span>

<p>首先需要充值一定的钱，建议先冲$10【换算成rmb大概60多元】就可试一试【支持支付宝和微信支付】<br>。</p>
<img src="/2019/04/16/0016_VPS/vultr-3.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>选择服务器所在区域，自己决定，不喜欢的话后面可以重新实例。</p>
<img src="/2019/04/16/0016_VPS/vultr-1.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>选择系统，建议选择cenlos 6*64【网上大神说的】，买$5元一个月就够了。其他都是默认就好，直接生产，需要1几分钟加载。</p>
<img src="/2019/04/16/0016_VPS/vultr-2.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>加载完成后就会有如下界面</p>
<img src="/2019/04/16/0016_VPS/vultr-4.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>点击图中的小齿轮，进去后要服务器的详细信息。</p>
<h2 id="vps的部署"><a href="#vps的部署" class="headerlink" title="vps的部署"></a>vps的部署</h2><h3 id="wget的安装"><a href="#wget的安装" class="headerlink" title="wget的安装"></a>wget的安装</h3><p>如果已经安装，则跳过此步骤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>

<h3 id="ssr的安装与配置"><a href="#ssr的安装与配置" class="headerlink" title="ssr的安装与配置"></a>ssr的安装与配置</h3><h4 id="命令行的安装"><a href="#命令行的安装" class="headerlink" title="命令行的安装"></a>命令行的安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>出现下图管理界面，输入1选择安装ssr</p>
<img src="/2019/04/16/0016_VPS/ssr-1.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>之后会弹出端口和密码的设置，自行设置【这里无图演示，嘻嘻嘻】</p>
<p>加密方式选择aes-256-cfb</p>
<img src="/2019/04/16/0016_VPS/ssr-2.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>协议插件选择auth_sha1_v4</p>
<img src="/2019/04/16/0016_VPS/ssr-3.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>混淆插件选择tlsl.2_ticket_auth</p>
<img src="/2019/04/16/0016_VPS/ssr-4.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>设备数限制，端口限速等自己设置，不设置也可以，反正自己用，直接回车设置默认值</p>
<img src="/2019/04/16/0016_VPS/ssr-5.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>之后就选择YES就开始正式部署，完成可以看到你的VPS所有信息</p>
<p>若要修改账号信息,直接输入快捷管理命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash ssr.sh</span><br></pre></td></tr></table></figure>


<h2 id="谷歌BBR加速"><a href="#谷歌BBR加速" class="headerlink" title="谷歌BBR加速"></a>谷歌BBR加速</h2><p>vultr的服务器是KVM框架，谷歌的BBR支持</p>
<p>brr的安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>

<p>然后会弹出任意键后继续，弹出是否重启，确认就好，如果无法重启，请手动重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<h2 id="客户端的安装"><a href="#客户端的安装" class="headerlink" title="客户端的安装"></a>客户端的安装</h2><p>自行到如下github网站的releases找到对应版本安装；ios和mac版的需要自行去github上找，一定有大神有的！</p>
<h3 id="ssr-windows"><a href="#ssr-windows" class="headerlink" title="ssr-windows"></a>ssr-windows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/shadowsocksrr/shadowsocksr-csharp</span><br></pre></td></tr></table></figure>

<h3 id="ssr-android"><a href="#ssr-android" class="headerlink" title="ssr-android"></a>ssr-android</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/shadowsocksrr/shadowsocksr-android</span><br></pre></td></tr></table></figure>


<h3 id="v2ray【本人使用】"><a href="#v2ray【本人使用】" class="headerlink" title="v2ray【本人使用】"></a>v2ray【本人使用】</h3><p>注意V2ray支持VMess和Shadowsocks协议的，所以ssr也可以在v2ray中使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.v2ray.com/</span><br></pre></td></tr></table></figure>
<p>可能需要翻墙才访问这个网站，如若想要直接下载，参考下图的地址即可</p>
<img src="/2019/04/16/0016_VPS/v2ray-1.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><p>1.打开客户端</p>
<p>2.复制ssr的链接直接导入即可，或者扫码导入</p>
<p>3.设置为PAC 自动代理（推荐），不需要浏览器插件就可以分网站使用代理</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>OH MY JANICE</title>
    <url>/2019/07/21/0017_OH%20MY%20JANICE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/07/21/0017_OH%20MY%20JANICE/1.jpg" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<span id="more"></span>
<h1 id="记下心路历程，难得矫情一次"><a href="#记下心路历程，难得矫情一次" class="headerlink" title="记下心路历程，难得矫情一次"></a>记下心路历程，难得矫情一次</h1><h3 id="OMJ-1"><a href="#OMJ-1" class="headerlink" title="OMJ_1"></a>OMJ_1</h3><p>前往演艺中心的路上就发现，身边都是Janice的粉丝，意识到这个世界原来有这么多志同道合的人……</p>
<h3 id="OMJ-2"><a href="#OMJ-2" class="headerlink" title="OMJ_2"></a>OMJ_2</h3><p>待我仔细观察时，发现好多girls，此时我还没意识到Janice的粉丝是女生为主，只觉得激动，想快点看到Janice……</p>
<h3 id="OMJ-3"><a href="#OMJ-3" class="headerlink" title="OMJ_3"></a>OMJ_3</h3><p>终于等到开场了，开场show很high，但是大家还是发现了点问题，就是Janice状态不太好……</p>
<h3 id="OMJ-4"><a href="#OMJ-4" class="headerlink" title="OMJ_4"></a>OMJ_4</h3><p>开完场，Janice就开始跟我们说sorry，自己病了不能给大家带来完美的show，此时我是有点遗憾且心疼的……</p>
<h3 id="OMJ-5"><a href="#OMJ-5" class="headerlink" title="OMJ_5"></a>OMJ_5</h3><p>“今晚的歌单是专门为你们准备的……”这句话估计是我今晚最感动的一句，也是这句让我恍然大悟，原来我身边的人都是</p>
<p>带着自己的故事来听Janice的歌，或者是来怀念当年，或者是想起了那个他or她……可是我一个没有故事的人，为什么听</p>
<p>得那么有感觉呢？……</p>
<h3 id="OMJ-6"><a href="#OMJ-6" class="headerlink" title="OMJ_6"></a>OMJ_6</h3><p>《心乱如麻》、《就算世界无童话》、《回电我》这一首首Jancie的经典歌她都带病唱完了，全场一直在大合唱，那时我</p>
<p>们不再是观众，也是这舞台上那个她……</p>
<h3 id="OMJ-7"><a href="#OMJ-7" class="headerlink" title="OMJ_7"></a>OMJ_7</h3><p>最心疼的是病了还给我们encore，全场都在encore，我的心是矛盾的，我喊不出来;因为一晚下来，她避开了一些难度较高</p>
<p>且伤喉咙的歌，而且有些歌的高音都唱不上去，应该是喉咙发炎了，真的好心疼她最后还encore了两首歌……</p>
<h3 id="OMJ-8"><a href="#OMJ-8" class="headerlink" title="OMJ_8"></a>OMJ_8</h3><p>以《大哥》和《就算世界无童话》结束，她实现了她开场对我们所说的话，把我们这帮fans的愿望都一次实现了。这些歌</p>
<p>都是陪伴我们度过人生某个难关，已经慢漫成为我们的青春，慢慢成为我们前进的动力。</p>
<h3 id="OMJ-9"><a href="#OMJ-9" class="headerlink" title="OMJ_9"></a>OMJ_9</h3><p>离场，过马路，坐地铁都能听到很多人在默默哼着Janice的歌……</p>
<video src="http://lc-jujabo3e.cn-n1.lcfile.com/4820025d85b010f49d05/IMG_5975.mp4" type="video/mp4" controls="controls" width="100%" height="80%">
</video>]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>风控个人总结小记</title>
    <url>/2025/02/16/0018_%E9%A3%8E%E6%8E%A7%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="yes" border="0" marginwidth="0" marginheight="0" allow="autoplay" width="600" height="100" src="https://i.y.qq.com/n2/m/outchain/player/index.html?songid=367894935&songtype=0">
</iframe>

<h2 id="金融行业数据前提"><a href="#金融行业数据前提" class="headerlink" title="金融行业数据前提"></a>金融行业数据前提</h2><p>1、金融行业是个极度厌倦风险的行业，需要高解释性和稳定性的规则&#x2F;模型。</p>
<p>2、金融行业数据量特别丰富，运用场景明显且量够。</p>
<p>3、行业数据价值极高，特别是银行业。</p>
<h2 id="信贷风控"><a href="#信贷风控" class="headerlink" title="信贷风控"></a>信贷风控</h2><p>1、信贷风控包括申请评分卡A卡、贷中行为评分卡B卡、催收评分卡C卡和反欺诈模型；</p>
<p>2、在金融领域追求可解释性情况下，特征工程其实是最重要的；“暴力穷举特征、业务理解特征、特征重要性”3个方法论中反复迭代叠加</p>
<p>3、机器学习、如LR、决策树、随机森林、xgboost等</p>
<h2 id="实时决策引擎"><a href="#实时决策引擎" class="headerlink" title="实时决策引擎"></a>实时决策引擎</h2><p>脱密列举一下基本操作</p>
<p>1、比如在手机银行（app）端进行转账，找到实时交易转账表及对应提前加工高的规则</p>
<p>2、白名单规则先洗一遍 </p>
<p>3、查看是否实时命中某一规则，命中执行对应操作</p>
<p>4、可疑客户进入一个设定的观察期中，观察期再次触碰是否增加延长期还是再次执行更高一级操作，如无命中退出观察期还是怎么样具体问题具体分析</p>
<h2 id="更新迭代"><a href="#更新迭代" class="headerlink" title="更新迭代"></a>更新迭代</h2><p>对手进步你也要更进一步，甚至抢先他们自己更进一步。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1、申请评分卡常用的特征：</p>
<table>
<thead>
<tr>
<th align="left">大类</th>
<th align="center">小类</th>
</tr>
</thead>
<tbody><tr>
<td align="left">个人信息</td>
<td align="center">学历 性别 收入</td>
</tr>
<tr>
<td align="left">负债信息</td>
<td align="center">在本金融机构或者其他金融机构负债情况</td>
</tr>
<tr>
<td align="left">消费能力</td>
<td align="center">商品购买纪录，出境游，奢侈品消费</td>
</tr>
<tr>
<td align="left">历史信用信息</td>
<td align="center">历史逾期行为</td>
</tr>
<tr>
<td align="left">互联网数据</td>
<td align="center">人际社交 网络足迹 出行 个人财务</td>
</tr>
</tbody></table>
<p>2、</p>
<p>未写完……</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>金融风控</tag>
      </tags>
  </entry>
  <entry>
    <title>sql和hive的总结小记</title>
    <url>/2025/02/16/0019_sql%E5%92%8Chive%E7%9A%84%E6%80%BB%E7%BB%93%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="yes" border="0" marginwidth="0" marginheight="0" allow="autoplay" width="600" height="100" src="https://i.y.qq.com/n2/m/outchain/player/index.html?songid=353767251&songtype=0">
</iframe>

<h3 id="sql执行顺序"><a href="#sql执行顺序" class="headerlink" title="sql执行顺序"></a>sql执行顺序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM / JOIN 确定数据源并连接表 特殊LATERAL VIEW explode()也在这个阶段完成</span><br><span class="line">WHERE       过滤行</span><br><span class="line">GROUP BY    分组</span><br><span class="line">HAVING	    过滤分组</span><br><span class="line">SELECT	    选择列并计算表达式</span><br><span class="line">DISTINCT    去重</span><br><span class="line">ORDER BY    排序</span><br><span class="line">LIMIT	    分页</span><br></pre></td></tr></table></figure>
<h3 id="with-as-语句"><a href="#with-as-语句" class="headerlink" title="with as 语句"></a>with as 语句</h3><p>with as语句在SQL中用于定义临时的结果集，称为公用表表达式。<br>这种结构在编写复杂的查询时非常有用，因为它允许你将查询分解成更易于管理和维护的小部分。</p>
<p>with as语句定义的临时结果集在整个查询中<strong>只存在一次</strong>，<strong>且仅在该查询内有效</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">with ods_769_xxxxxtable as ( -- 你的子查询 ) <span class="keyword">select</span> * from chuang1chuang;</span><br></pre></td></tr></table></figure>
<p>使用场景</p>
<p>提高可读性：将复杂的子查询分解成多个逻辑部分，使得整个查询更容易理解。</p>
<p>避免重复的子查询：如果你在查询中多次使用同一个子查询，可以放入其中，从而减少代码重复。</p>
<p>递归查询：在某些情况下，比如处理层级数据或递归关系时，可以用来执行递归查询。</p>
<h3 id="sql函数学习使用梯度"><a href="#sql函数学习使用梯度" class="headerlink" title="sql函数学习使用梯度"></a>sql函数学习使用梯度</h3><p>第一梯队：OVER、LATERAL VIEW、LAG、时间函数</p>
<p>第二梯队：ROW_NUMBER、CASE WHEN、JSON_EXTRACT、GROUPING SETS</p>
<p>第三梯队：字符串处理、数据类型转化、空值处理、模糊匹配等相关内容</p>
<h3 id="lag-lead开窗函数"><a href="#lag-lead开窗函数" class="headerlink" title="lag&#x2F;lead开窗函数"></a>lag&#x2F;lead开窗函数</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>sql中的lead和lag函数是窗口函数，用于访问结果集中当前行之前或之后的行的数据。</p>
<p>这两个函数在计算变化率、差异、或者构建特定于时间序列的数据特征。</p>
<p>lead用于访问当前行之后的行中数据，简单来做就是把一列数据“往上推”，而lag相反，是把数据往下推。</p>
<table>
<thead>
<tr>
<th align="left">date</th>
<th align="center">sales</th>
</tr>
</thead>
<tbody><tr>
<td align="left">2020-01-01</td>
<td align="center">100</td>
</tr>
<tr>
<td align="left">2020-01-02</td>
<td align="center">120</td>
</tr>
<tr>
<td align="left">2020-01-03</td>
<td align="center">150</td>
</tr>
<tr>
<td align="left">2020-01-04</td>
<td align="center">170</td>
</tr>
</tbody></table>
<p>执行下列语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date,</span><br><span class="line">       sales,</span><br><span class="line">       lead(Sales, 1) over (order by  date) as weihe</span><br><span class="line">from sales;</span><br></pre></td></tr></table></figure>
<p>得到的结果为：</p>
<table>
<thead>
<tr>
<th align="left">date</th>
<th align="center">sales</th>
<th align="center">weihe</th>
</tr>
</thead>
<tbody><tr>
<td align="left">2020-01-01</td>
<td align="center">100</td>
<td align="center">120</td>
</tr>
<tr>
<td align="left">2020-01-02</td>
<td align="center">120</td>
<td align="center">150</td>
</tr>
<tr>
<td align="left">2020-01-03</td>
<td align="center">150</td>
<td align="center">170</td>
</tr>
<tr>
<td align="left">2020-01-04</td>
<td align="center">170</td>
<td align="center">null</td>
</tr>
</tbody></table>
<p>这个函数的命令就好像是，要求数据表中的某一列，先拿出来，然后上移或者下移几行，然后再拼回去。这样使得一行内有两列数据，可以对比明天和今天的数据变化。</p>
<p>这两个函数的完整参数包括：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LAG(expression [,offset [,default]]) OVER ( [partition_by_clause] order_by_clause)</span><br><span class="line">LEAD(expression [,offset [,default]]) OVER ( [partition_by_clause] order_by_clause)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<p>expression: 需要检索的列。</p>
<p>offset: 相对于当前行向上查找的行数，默认为1。</p>
<p>default: 如果向上偏移超出了范围，则返回的默认值，默认为NULL。</p>
<p>partition_by_clause: 将数据分成不同的段进行独立计算。</p>
<p>order_by_clause: 定义窗口内数据的排序方式。</p>
<h4 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h4><ol>
<li>计算变化和变化率</li>
</ol>
<p>可以使用LAG或LEAD来计算当前值与之前&#x2F;之后某个值之间的差异或变化率。这对于经济学数据、股票价格、销售数据等领域特别有用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT Date,</span><br><span class="line">       Sales,</span><br><span class="line">       Sales - LAG(Sales) OVER (ORDER BY Date) AS SalesChange,</span><br><span class="line">       (Sales - LAG(Sales) OVER (ORDER BY Date)) / LAG(Sales) OVER (ORDER BY Date) * 100 AS SalesChangeRate</span><br><span class="line">FROM sales;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>时间序列平滑</li>
</ol>
<p>使用LEAD和LAG可以创建简单的移动平均或滑动窗口平均，有助于平滑短期波动并识别长期趋势。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT Date,</span><br><span class="line">       Sales,</span><br><span class="line">       (LAG(Sales, 1) OVER (ORDER BY Date) + Sales + LEAD(Sales, 1) OVER (ORDER BY Date)) / 3 AS MovingAverage</span><br><span class="line">FROM sales;</span><br></pre></td></tr></table></figure>
<p>对于更复杂的分析，可能需要考虑更宽的时间窗口，比如比较当前值与前后5天的平均值等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT Date,</span><br><span class="line">       Sales,</span><br><span class="line">       (LAG(Sales, 5) OVER (ORDER BY Date) + ... + LEAD(Sales, 5) OVER (ORDER BY Date)) / 11 AS ExtendedWindowAverage</span><br><span class="line">FROM sales;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>寻找序列中的特定模式</li>
</ol>
<p>可以通过比较当前行与之前&#x2F;之后的行来识别数据中的特定模式或趋势，如连续增长、连续下降或周期性模式。</p>
<ol start="4">
<li>数据修正和异常检测</li>
</ol>
<p>通过比较相邻的值，可以发现可能的数据录入错误或异常值。例如，如果一天的销售额与前后相差极大，可能需要进一步审查。</p>
<ol start="5">
<li>时间窗口的扩展分析</li>
</ol>
<p>对于更复杂的分析，可能需要考虑更宽的时间窗口，比如比较当前值与前后5天的平均值等。</p>
<h3 id="rows-between-控制窗口函数的范围"><a href="#rows-between-控制窗口函数的范围" class="headerlink" title="rows between 控制窗口函数的范围"></a>rows between 控制窗口函数的范围</h3><p>使用rows between可以根据自己的需求任意的控制窗口函数的范围</p>
<p>UNBOUNDED ：不受控的，无限的；</p>
<p>PRECEDING ： 在…之前；</p>
<p>FOLLOWING： 在…之后；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rows between …… and ……</span><br><span class="line">unbounded preceding 前面所有行</span><br><span class="line">unbounded following 后面所有行</span><br><span class="line">current row 当前行</span><br><span class="line">n following  后面n行</span><br><span class="line">n preceding  前面n行</span><br></pre></td></tr></table></figure>
<p>rows between 例子<br>当前行与后面所有行的累加（分区内）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum(sales_volume) over(partition by id rows between current row and unbounded following) sum_sales</span><br></pre></td></tr></table></figure>
<p>前一行的值+当前行的值+后一行的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum(id) over(partition by category rows between 1 preceding and 1 following) rank from t</span><br></pre></td></tr></table></figure>


<h3 id="range-between-按照列值限制窗口大小"><a href="#range-between-按照列值限制窗口大小" class="headerlink" title="range between 按照列值限制窗口大小"></a>range between 按照列值限制窗口大小</h3><p>rows表示 行，就是前n行，后n行</p>
<p>而range表示的是 具体的值，比这个值小n的行，比这个值大n的行</p>
<p>range between是以当前值为锚点进行计算</p>
<p>如果当前值为10的话就取前后的值在6到17之间的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">range between 4 preceding AND 7 following</span><br></pre></td></tr></table></figure>
<h3 id="列转行-行转列"><a href="#列转行-行转列" class="headerlink" title="列转行&#x2F;行转列"></a>列转行&#x2F;行转列</h3><h4 id="列转行常用LATERAL-VIEW"><a href="#列转行常用LATERAL-VIEW" class="headerlink" title="列转行常用LATERAL VIEW"></a>列转行常用LATERAL VIEW</h4><p>在Hive中，LATERAL VIEW与explode()函数经常一起使用，用于将一个数组类型的列展开成多行，<br>这在处理如JSON数组等复杂数据类型时特别有用（因为很多数据格式是储存在json内，例如埋点数据，日期数据等）</p>
<table>
<thead>
<tr>
<th align="left">产品id</th>
<th align="center">月销售情况</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="center">[(“1月”,100),(“2月”,150)]</td>
</tr>
<tr>
<td align="left">B</td>
<td align="center">[(“1月”,200),(“2月”,250)]</td>
</tr>
</tbody></table>
<p>我们的目标是将每个产品的月份销售情况数组展开为单独的行，以便于分析每个月的销售情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT product_id, month_sales.month, month_sales.sales</span><br><span class="line">FROM sales_table</span><br><span class="line">LATERAL VIEW explode(month_sales_array) t AS month_sales;</span><br><span class="line">--语法解释</span><br><span class="line">--sales_table 是原始数据表。</span><br><span class="line">--product_id 是产品ID列。</span><br><span class="line">--month_sales_array 是包含月份销售情况的数组列。</span><br><span class="line">--explode() 函数用于将数组中的每个元素转换为一行。</span><br><span class="line">--LATERAL VIEW 与explode()结合使用，用于将复杂的列（如数组）展开成行。</span><br></pre></td></tr></table></figure>
<p>注意，这里的LATERAL VIEW explode（）函数写在FROM的后面，如果你需要筛选字段，需要把WHERE写在LATERAL VIEW后面，这个是一个很特别的运行顺序，因为LATERAL VIEW是在FROM阶段被处理的，他需要先从原始表中生成额外的行，进而才能被WHERE筛选，确保所有生成的行都被考虑在内。</p>
<p>备注：这也意味着，你可以通过这个被展开的新的字段month_sales进行筛选，因为他已经被展开了。</p>
<p>注意事项：</p>
<p>数据类型匹配： 使用explode()之前，确保字段确实是数组或map等可以展开的复杂数据类型。</p>
<p>NULL值处理： 如果explode()作用于包含NULL的列，它不会为NULL生成行。这可能会影响到结果集的行数，特别是在统计或聚合操作中需要注意这一点。</p>
<p>性能考虑： 因为explode()会显著增加行数（尤其是在处理大数组时），所以在大数据集上使用时需要注意查询性能和资源消耗。</p>
<h4 id="行转列-常用case-when函数"><a href="#行转列-常用case-when函数" class="headerlink" title="行转列 常用case when函数"></a>行转列 常用case when函数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CASE </span><br><span class="line">    WHEN 条件1 THEN 结果1</span><br><span class="line">    WHEN 条件2 THEN 结果2</span><br><span class="line">    ...</span><br><span class="line">    ELSE 除上述情况以外的结果</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="hive使用频繁的函数"><a href="#hive使用频繁的函数" class="headerlink" title="hive使用频繁的函数"></a>hive使用频繁的函数</h3><p>向上取整 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceil（double a） --  ceil(9.1) 10</span><br></pre></td></tr></table></figure>
<p>向下取整 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">floor（double a）  -- floor(9.9) 9</span><br></pre></td></tr></table></figure>
<p>四舍五入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">round（double a，int n） -- round(9.56,1) 9.6</span><br></pre></td></tr></table></figure>
<p>获取当前时间 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CURRENT_DATE -- 2021-08-09</span><br></pre></td></tr></table></figure>
<p>获取当前日期 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CURRENT_TIMESTAMP -- 2021-08-09 20:13:30.024</span><br></pre></td></tr></table></figure>
<p>日期差值：datediff(结束日期，开始日期)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DATEDIFF(CURRENT_DATE,<span class="string">&#x27;2021-08-01&#x27;</span>) -- 8 </span><br></pre></td></tr></table></figure>
<p>日期加减：date_add(时间，增加天数)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DATE_ADD(<span class="string">&#x27;2021-08-01&#x27;</span>,-30) -- 2021-07-02</span><br></pre></td></tr></table></figure>
<p>获取当月第一天</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TRUNC(CURRENT_DATE,<span class="string">&#x27;MM&#x27;</span>) -- 2021-08-01 </span><br></pre></td></tr></table></figure>
<p>获取当年第一天</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TRUNC(CURRENT_DATE, <span class="string">&#x27;YY&#x27;</span>) -- 2021-01-01 </span><br></pre></td></tr></table></figure>
<p>获取当月最后一天</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LAST_DAY(CURRENT_DATE) -- 2021-08-31</span><br></pre></td></tr></table></figure>
<p>返回当前时间的下一个指定星期对应的日期</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NEXT_DAY(CURRENT_DATE,<span class="string">&#x27;MO&#x27;</span>) -- 2021-08-16 </span><br></pre></td></tr></table></figure>
<p>显性类型转换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CAST（value AS <span class="built_in">type</span>） -- CAST(<span class="string">&#x27;10&#x27;</span> AS INT )</span><br></pre></td></tr></table></figure>
<p>未完……</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hive</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>ML整理</title>
    <url>/2025/02/20/0020_ML%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分类与回归"><a href="#分类与回归" class="headerlink" title="分类与回归"></a>分类与回归</h2><p>分类问题与回归问题，两者之间的区别在于输出空间<strong>是否是一个度量空间</strong>  。</p>
<p>分类问题:输出空间是一个“是与否”的二分类及多分类的度量空间 ，<strong>是定性的</strong>。</p>
<p>回归问题：其输出空间是一个度量空间，<strong>是定量的</strong>。亦或者说回归问题的输出空间定义了一个度量去衡量输出值与真实值之间的“误差大小”。</p>
<p>我学习时看到网上说区别在在于输出空间是否连续的，我觉得也可以去理解，能用且区分就行。</p>
<h2 id="回归01：线性回归"><a href="#回归01：线性回归" class="headerlink" title="回归01：线性回归"></a>回归01：线性回归</h2><h2 id="分类01：逻辑回归"><a href="#分类01：逻辑回归" class="headerlink" title="分类01：逻辑回归"></a>分类01：逻辑回归</h2><p>逻辑回归也可以称为对数几率回归，是个分类问题。</p>
<ul>
<li>sigmod函数将值映射到0&#x2F;1间</li>
</ul>
<p>未写完……</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>ML和统计学basic</title>
    <url>/2025/02/22/0021_ML_basic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h2><p>1、基本定义</p>
<p>条件概率的逆向计算公式，帮助我们从<strong>已知结果</strong>推测原因：</p>
<img src="/2025/02/22/0021_ML_basic/img.png" class title="img.png"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>其中：</p>
<p>P(A∣B)：在事件 B 已发生的情况下，事件 A 的概率（后验概率）。</p>
<p>P(A)：事件 A 的初始概率（先验概率）。</p>
<p>P(B∣A)：在事件 A 发生的情况下，事件 B 的概率（似然）。</p>
<p>P(B)：事件 B 的总体概率。</p>
<h2 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h2><p>1、根据中心极限定理，如果一个事物受到多种因素的影响，不管每个因素本身是什么分布，它们加总后，结果的平均值就是正态分布。</p>
<p>2、正态分布只适合各种因素累加的情况，如果这些因素不是彼此独立的，会互相加强影响，那么就不是正态分布了。</p>
<p>3、如果各种因素对结果的影响不是相加，而是相乘，那么最终结果不是正态分布，而是对数正态分布（log normal distribution），即 x 的对数值log(x)满足正态分布。</p>
<p>其他分布可见：<a href="https://github.com/graykode/distribution-is-all-you-need">https://github.com/graykode/distribution-is-all-you-need</a></p>
<h2 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h2><p>定义：从均值为μ，方差为σ^2的任意分布总体中，抽取数量为n的样本。只要n足够大，样本均值就会近似服从均值为μ，方差为σ^2&#x2F;n的正态分布。</p>
<p>1、使用中心极限定理不要求原始数据的分布是正态分布。</p>
<p>2、样本容量 n 必须足够大。通常认为样本大小超过30时，中心极限定理开始有效，但具体的大小取决于数据的分布特征。</p>
<p>3、即使原始分布是偏态的或是其他类型的分布，样本均值的分布仍然会趋向正态分布。</p>
<h2 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h2><p>1、简单的同比、环比、年化率</p>
<p>2、时间序列模型（实操用得到基本上是ARIMA)</p>
<table>
<thead>
<tr>
<th align="left">模型</th>
<th align="center">概念</th>
<th align="center">特点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">自回归模型<br>AR<br>AutoRegressive<br></td>
<td align="center">基于时间序列自身过去的值来预测当前值的一种模型。简单来说，AR模型假设当前时刻的值是由过去若干时刻的值线性组合得到的。</td>
<td align="center">周期性要非常稳定</td>
</tr>
<tr>
<td align="left">移动平均模型<br>MA<br>Moving Average<br></td>
<td align="center">基于过去若干时刻的预测误差（残差）来预测当前值的模型。它假设当前值是过去误差项的线性组合。</td>
<td align="center">消除部分残差，例如大订单量中没有周期性和趋势，直接使用移动平均磨平残差</td>
</tr>
<tr>
<td align="left">自回归移动平均模型<br>ARMA<br>AutoRegressive Moving Average<br></td>
<td align="center">结合了AR模型和MA模型的特点，用于建模平稳时间序列。它同时考虑了时间序列过去的值和过去的误差项。</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">自回归积分移动平均模型<br>ARIMA<br>AutoRegressive Integrated Moving Average<br></td>
<td align="center">用于建模非平稳时间序列。通过差分（积分）使数据平稳后，再应用ARMA模型进行建模。</td>
<td align="center">实际中很多时间序列是不平稳的，也算比较常用</td>
</tr>
<tr>
<td align="left">季节性自回归积分移动平均模型<br>SARIMA<br>Seasonal ARIMA<br></td>
<td align="center">在ARIMA模型的基础上增加了季节性成分，用于处理具有季节性波动的时间序列。</td>
<td align="center">添加季节性</td>
</tr>
</tbody></table>
<p>未写完……</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>经营分析总结小记</title>
    <url>/2025/02/24/0022_%E7%BB%8F%E8%90%A5%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="个人对经分与商分的看法"><a href="#个人对经分与商分的看法" class="headerlink" title="个人对经分与商分的看法"></a>个人对经分与商分的看法</h1><p>经分和商分的工作内容个人感觉基本一致只是侧重不同；</p>
<p>商分更关注运营侧的指标异动、趋势探究、经营复盘、类目分析等等，对损益类的指标关注有但是没有经分多。</p>
<p>经分对财务和损益指标做的更细一点 工作内容上也更宏观,一般都对整个事业部的结果负责;一般工作流程是定规划、常跟进、 做解读、 能优化 。</p>
<h1 id="经分-（收入-成本-规模-利润）"><a href="#经分-（收入-成本-规模-利润）" class="headerlink" title="经分-（收入+成本+规模+利润）"></a>经分-（收入+成本+规模+利润）</h1><h2 id="收入的四种模式（C端）"><a href="#收入的四种模式（C端）" class="headerlink" title="收入的四种模式（C端）"></a>收入的四种模式（C端）</h2><p> 1、流量收入（类似广告）</p>
<p>与其他三种收入区别在于<strong>是否发生交易行为</strong></p>
<p>cpc 单次点击成本 &#x3D; 广告流量 * 转化率 * 单次点击价格</p>
<p>cpm &#x3D; 广告流量(前端展示就收费)*每千次展示可以获得广告收入</p>
<p> 2、手续费收入（平台佣金）</p>
<p>收入 &#x3D; gmv * 佣金率</p>
<p> 3、产供销收入（含供应链供应商） </p>
<p>产品生产、供应、销售都是一家企业，比如shein </p>
<p>收入 &#x3D; 流量 * 进店转化率 * 下单转化率 * 客单价</p>
<p> 4、增值服务收入（会员）</p>
<p>收入 &#x3D; 流量 * 转化率 * arppu</p>
<h2 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h2><p>1、主营业务成本收入</p>
<p>推广成本 、 维护成本 、 其他业务成本</p>
<p>2、行政及其他收入 （一般不分析这部分）</p>
<p>3、其实也可以分为固定成本和变动成本，<strong>重点关注变动成本</strong>，这部分是核心，比如某类面向c端的产品，当它生产量级越大，其成本就会下降。</p>
<h2 id="规模（用户规模和资金规模）"><a href="#规模（用户规模和资金规模）" class="headerlink" title="规模（用户规模和资金规模）"></a>规模（用户规模和资金规模）</h2><p>看<strong>公司发展阶段</strong>来侧重于规模指标，常用新增用户、活跃用户、付费用户等。  </p>
<h2 id="利润两种计算方式"><a href="#利润两种计算方式" class="headerlink" title="利润两种计算方式"></a>利润两种计算方式</h2><p>毛利润 &#x3D; 收入 - 成本 </p>
<p>净利润 &#x3D; 收入 - （销售、管理、运营等）费用 - 所得税</p>
<p>注意：毛利润 &gt;&gt; 净利润，毛利润是净利润的基础，一般经营分析是在缴纳税前的。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>经营分析</tag>
      </tags>
  </entry>
  <entry>
    <title>使用sklearn进行特征工程</title>
    <url>/2025/02/26/0023_sklearn%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据使用说明"><a href="#数据使用说明" class="headerlink" title="数据使用说明"></a>数据使用说明</h1><p>1、IRIS数据集由Fisher在 1936 年整理；特征值都为正浮点数，单位为厘米。</p>
<table>
<thead>
<tr>
<th align="center">英文名</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Sepal.Length</td>
<td align="center">花萼长度</td>
</tr>
<tr>
<td align="center">Sepal.Width</td>
<td align="center">花萼宽度</td>
</tr>
<tr>
<td align="center">Petal.Length</td>
<td align="center">花瓣长度</td>
</tr>
<tr>
<td align="center">Petal.Width</td>
<td align="center">花瓣长度</td>
</tr>
</tbody></table>
<p>目标值为鸢尾花的分类【Iris Setosa山鸢尾、Iris Versicolour杂色鸢尾、Iris Virginica维吉尼亚鸢尾】。</p>
<p>2、所是使用到的py库</p>
<img src="/2025/02/26/0023_sklearn%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/img.png" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>

<p>具体源引用如下</p>
<p><a href="https://scikit-learn.org/stable/modules/preprocessing.html#non-linear-transformation">https://scikit-learn.org/stable/modules/preprocessing.html#non-linear-transformation</a></p>
<iframe src="../0023_sklearn特征工程/sklearn_pratice.html" width="650" height="900"></iframe> 
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sklearn</tag>
        <tag>ml</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库和数据仓库</title>
    <url>/2025/02/26/0024_%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h1><ul>
<li>数据仓库是面向主题的、集成的、非易失的和时变的数据集合，用以支持管理决策。</li>
</ul>
<h2 id="数据仓库与数据库的区别"><a href="#数据仓库与数据库的区别" class="headerlink" title="数据仓库与数据库的区别"></a>数据仓库与数据库的区别</h2><ul>
<li><p>数据库与数据仓库的区别实际讲的是 OLTP 与 OLAP 的区别。</p>
<ul>
<li><p>操作型处理，叫联机事务处理 OLTP（On-Line Transaction Processing，），也可以称面向交易的处理系统，它是针对具体业务在数据库联机的日常操作，通常对少数记录进行查询、修改。用户较为关心操作的响应时间、数据的安全性、完整性和并发支持的用户数等问题。传统的数据库系统作为数据管理的主要手段，主要用于操作型处理，像Mysql，Oracle等关系型数据库一般属于OLTP。</p>
</li>
<li><p>分析型处理，叫联机分析处理 OLAP（On-Line Analytical Processing）一般针对某些主题的历史数据进行分析，支持管理决策。</p>
</li>
</ul>
</li>
<li><p>数据库是面向事务的设计，数据仓库是面向主题设计的。</p>
</li>
<li><p>数据库一般存储业务数据，数据仓库存储的一般是历史数据。</p>
</li>
<li><p>数据库是为捕获数据而设计，数据仓库是为分析数据而设计。</p>
</li>
<li><p>数据仓库，是在数据库已经大量存在的情况下，为了进一步挖掘数据资源、为了决策需要而产生的，它决不是所谓的“大型数据库”。</p>
</li>
</ul>
<h2 id="数据仓库架构"><a href="#数据仓库架构" class="headerlink" title="数据仓库架构"></a>数据仓库架构</h2><img src="/2025/02/26/0024_%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/1.webp" class  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>


<h2 id="元数据管理"><a href="#元数据管理" class="headerlink" title="元数据管理"></a>元数据管理</h2><ul>
<li>元数据（Meta Date），主要记录数据仓库中模型的定义、各层级间的映射关系、监控数据仓库的数据状态及ETL的任务运行状态。</li>
</ul>
<h2 id="ETL"><a href="#ETL" class="headerlink" title="ETL"></a>ETL</h2><ul>
<li><p>ETL分为 抽取Extra, 转化Transfer, 装载Load；</p>
</li>
<li><p>数据仓库从各数据源获取数据及在数据仓库内的数据转换和流动都可以认为是ETL;</p>
</li>
<li><p>数据仓库日常的管理和维护工作的大部分精力就是保持ETL的正常和稳定;</p>
</li>
</ul>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>我接触过的数据库有 MySQL、Hive、Teradata和GaussDB，这些都是面向不同场景设计的数据库系统，其核心差异和SQL查询注意事项如下：</p>
<h2 id="核心差异对比"><a href="#核心差异对比" class="headerlink" title="核心差异对比"></a>核心差异对比</h2><h3 id="定位与适用场景"><a href="#定位与适用场景" class="headerlink" title="定位与适用场景"></a>定位与适用场景</h3><ul>
<li>MySQL：关系型数据库（RDBMS），适用于OLTP场景（如交易系统），支持ACID事务，但扩展性有限。</li>
<li>Hive：基于Hadoop的数据仓库（OLAP），面向大数据批量分析，延迟较高，不支持事务。</li>
<li>Teradata：传统MPP架构数据仓库，擅长复杂分析型查询（如金融、电信行业），但硬件成本高，云原生支持较弱。</li>
<li>GaussDB (for MySQL)：华为分布式数据库，兼容MySQL协议，支持OLTP&#x2F;OLAP混合负载，计算存储分离架构，适合云原生高并发场景。</li>
</ul>
<h3 id="架构与扩展性"><a href="#架构与扩展性" class="headerlink" title="架构与扩展性"></a>架构与扩展性</h3><ul>
<li>MySQL：单机或主从架构，扩展依赖分库分表（如ShardingSphere）。</li>
<li>Hive：依赖HDFS和MapReduce，横向扩展性强，但实时性差。</li>
<li>Teradata：基于共享存储的MPP架构，节点间依赖高速网络，扩展需专用硬件。</li>
<li>GaussDB：分布式架构（计算与存储分离），支持秒级弹性扩容（1写15读），跨AZ部署。</li>
</ul>
<h3 id="SQL兼容性与优化"><a href="#SQL兼容性与优化" class="headerlink" title="SQL兼容性与优化"></a>SQL兼容性与优化</h3><ul>
<li>MySQL：完整SQL标准支持，索引优化成熟（如B+树、覆盖索引）。</li>
<li>Hive：类SQL语法（HQL），部分功能受限（如非等值连接需改写），执行依赖MapReduce&#x2F;Tez。</li>
<li>Teradata：支持ANSI SQL，优化器针对复杂查询（如多表JOIN）有独特优化，但语法细节差异较大。</li>
<li>GaussDB：深度兼容MySQL语法，支持分布式优化（如Limit Offset下推、智能缓存），性能可达MySQL的7倍。</li>
</ul>
<h3 id="成本与生态"><a href="#成本与生态" class="headerlink" title="成本与生态"></a>成本与生态</h3><ul>
<li>MySQL：开源免费（社区版），但企业版需付费；生态完善。</li>
<li>Hive：开源，依赖Hadoop生态（如Spark、HBase），适合大数据栈集成。</li>
<li>Teradata：商业授权费用高昂，适合预算充足的行业。</li>
<li>GaussDB：按需付费，支持混合云部署，与华为云服务深度集成。</li>
</ul>
<h2 id="分布式SQL查询注意事项"><a href="#分布式SQL查询注意事项" class="headerlink" title="分布式SQL查询注意事项"></a>分布式SQL查询注意事项</h2><h3 id="事务与一致性"><a href="#事务与一致性" class="headerlink" title="事务与一致性"></a>事务与一致性</h3><ul>
<li>MySQL&#x2F;GaussDB：支持分布式事务（如XA协议），需注意锁冲突和隔离级别（如GaussDB的全局一致性）。</li>
<li>Hive：无事务支持，需通过批处理保证数据一致性。</li>
<li>Teradata：强一致性设计，但需避免跨节点大事务导致的性能瓶颈。</li>
</ul>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li>索引策略：<ul>
<li>MySQL&#x2F;GaussDB：合理设计组合索引，避免全表扫描。</li>
<li>Hive：分区和分桶优化（如按日期分区），减少数据扫描量。</li>
<li>Teradata：利用主索引（Primary Index）实现数据均匀分布。</li>
</ul>
</li>
<li>查询改写：<ul>
<li>Hive：避免复杂子查询，优先使用MAPJOIN处理小表关联。</li>
<li>GaussDB：启用Limit Offset下推，减少回表开销（如<code>SELECT * FROM table LIMIT 1000000,10</code>）。</li>
</ul>
</li>
</ul>
<h3 id="数据类型与函数差异"><a href="#数据类型与函数差异" class="headerlink" title="数据类型与函数差异"></a>数据类型与函数差异</h3><ul>
<li>字符串处理：Hive严格区分大小写（<code>&#39;Bigdata&#39; != &#39;bigdata&#39;</code>），MySQL默认不区分。</li>
<li>数值运算：Hive中整数除法返回DECIMAL（如<code>10/3=3.333</code>），而MySQL返回FLOAT；GaussDB支持<code>DIV</code>运算符返回整数。</li>
</ul>
<h3 id="分布式特性适配"><a href="#分布式特性适配" class="headerlink" title="分布式特性适配"></a>分布式特性适配</h3><ul>
<li>数据分布：<ul>
<li>GaussDB&#x2F;Teradata：需指定分布键（如用户ID），避免数据倾斜。</li>
<li>Hive：依赖HDFS分块，需优化文件大小（如128MB&#x2F;块）。</li>
</ul>
</li>
<li>执行计划：<ul>
<li>GaussDB：利用全局执行计划优化器，避免跨节点网络开销。</li>
<li>Hive：通过<code>EXPLAIN</code>分析MapReduce阶段，优化Job并行度。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hive</tag>
        <tag>MySQL</tag>
        <tag>Teradata</tag>
        <tag>GaussDB</tag>
        <tag>数据仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>样本不均衡</title>
    <url>/2025/02/26/0025_%E6%A0%B7%E6%9C%AC%E4%B8%8D%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前要"><a href="#前要" class="headerlink" title="前要"></a>前要</h2><p>在欺诈场景中经常出现欺诈交易样本总是占少数的，但是对于识别欺诈中这少数样本又是很重要的。由此引出样本不均衡的问题，既分类任务中不同类别训练样例数目差别较大的情况。</p>
<h2 id="样本不均衡带来的影响"><a href="#样本不均衡带来的影响" class="headerlink" title="样本不均衡带来的影响"></a>样本不均衡带来的影响</h2><p>导致模型会学习到训练集中样本比例的这种先验性信息，在实际预测会对多数类别有侧重。</p>
<h2 id="3次判读有无必要解决不平衡"><a href="#3次判读有无必要解决不平衡" class="headerlink" title="3次判读有无必要解决不平衡"></a>3次判读有无必要解决不平衡</h2><p>1、判断任务是否复杂，越复杂模型对样本不平衡越敏感；</p>
<p>2、判断训练样本的分布与真实样本分布是否一致且稳定：一致的话影响不大；</p>
<p>3、判断是否出现某一类别样本数目非常稀少的情况，那就采取数据增强或者异常检测的单分类模型。</p>
<h2 id="样本不均衡解决方法"><a href="#样本不均衡解决方法" class="headerlink" title="样本不均衡解决方法"></a>样本不均衡解决方法</h2><h3 id="样本阶段"><a href="#样本阶段" class="headerlink" title="样本阶段"></a>样本阶段</h3><ul>
<li><p>直接过采样、欠采样或者两者混合；</p>
</li>
<li><p>使用预设的数据变换规则对进行数据扩增的 数据增强；</p>
</li>
</ul>
<p>也存在问题：</p>
<ul>
<li>欠采样可能会丢失重要信息；而过采样和数据增强会导入引入片面噪声，导致过拟合。</li>
</ul>
<h3 id="损失函数阶段"><a href="#损失函数阶段" class="headerlink" title="损失函数阶段"></a>损失函数阶段</h3><ul>
<li><p>使用代价敏感学习方法，为不同的分类错误给予不同惩罚力度（权重），在调节类别平衡的同时，也不会增加计算复杂度。</p>
</li>
<li><p>根据OHEM和Focal loss的思路，把类别的不平衡可以归结为难易样本的不平衡，而难易样本的不平衡可以归结为梯度的不平衡。</p>
</li>
</ul>
<h3 id="模型阶段"><a href="#模型阶段" class="headerlink" title="模型阶段"></a>模型阶段</h3><ul>
<li><p>选取对样本不均衡比较不敏感的模型，如决策树（模型在每次划分过程考虑的局部增益，全局的不平衡落到局部就不一定）</p>
</li>
<li><p>采样+集成学习：通过重复组合少数类样本与抽样的同样数量的多数类样本，训练若干的分类器进行集成学习</p>
</li>
<li><p>解决过于不平衡时考虑将问题变成异常检测问题。</p>
</li>
</ul>
<h3 id="决策评估指标选择"><a href="#决策评估指标选择" class="headerlink" title="决策评估指标选择"></a>决策评估指标选择</h3><ul>
<li>预测时分类阈值调整</li>
<li>模型评估，可以采用AUC、AUPRC(更优)评估模型表现。AUC对样本的正负样本比例情况是不敏感。</li>
</ul>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>真实反欺诈场景会更复杂，以上相对传统方法就有点跟不上时代了。尤其是欺诈场景现在存在4点问题：</p>
<ul>
<li>数据稀缺性：真实欺诈样本不足导致模型无法学习完整的欺诈模式</li>
<li>模式动态性：欺诈手段平均每72小时发生变异，远超传统模型的更新频率</li>
<li>隐私合规风险：欧盟GDPR等法规限制原始数据的共享与利用</li>
<li>模型可解释性： 在银行、监管体系中既要又要，构建模型相对保守，导致实际漏检率高。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
</search>
